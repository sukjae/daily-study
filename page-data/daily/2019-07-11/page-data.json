{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-07-11/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"4af659fc-30cf-50c3-9f9c-a93998f8612c","excerpt":"공부 이유 : 요즘 functional programming과 reactive programming을 학습하며 다양한 Intro 강의들을 찾아 학습하고 있다. 그 중에서 오랜만에 깔끔하고 잘 만들어진 강의가 있어 정리해 보았다. [Just Enough Functional…","html":"<h2>공부 이유 :</h2>\n<p>요즘 functional programming과 reactive programming을 학습하며 다양한 Intro 강의들을 찾아 학습하고 있다. 그 중에서 오랜만에 깔끔하고 잘 만들어진 강의가 있어 정리해 보았다. <a href=\"https://egghead.io/courses/just-enough-functional-programming-in-javascript\">[Just Enough Functional Programming in JavaScript]</a></p>\n<h2>공부 내용 :</h2>\n<p>강의에서 강사는 말 그대로 Functional Programming을 바로 사용할 수 있을 정도의 적당한 레벨의 지식을 전달한다. 전체적인 느낌을 보기도 좋고, 실무에 부분 부분 적용 해 보기도 좋은 것 같다. </p>\n<h3>CH9. Improve JavaScript Function Usability with Proper Argument Order in Functional Programming</h3>\n<p>이번 강의에서는 FP의 원칙을 따라 인자들의 전달 순서를 정하는 방법에 대해 논한다. </p>\n<p>전달될 인자를 특정한 순서로 제공 함으로써 다음과 같은 장점을 얻을 수 있다. </p>\n<ul>\n<li>partial application 가 주는 장점들</li>\n<li>improve reusability</li>\n<li>enable composition of functions</li>\n</ul>\n<p>우리는 인자 전달 방식중에 <strong>데이터를 항상 마지막에 전달</strong>하는 방법에 대해 논할것이다 .</p>\n<p>이를 통하여 하나의 함수의 연산 결과가 다른 함수의 인자로 연결되는 것을 가능하게 할것이다. </p>\n<p>다음 예시와 같은 함수의 형태에서는 partial applied function을 생성할 수 없다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Argument Order</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 예를 curried function으로 바꿔주면 아래와 같이 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Argument Order</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">array</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">cb</span> <span class=\"token operator\">=></span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span> \n    \n    <span class=\"token keyword\">const</span> withArr <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">withArr</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">withArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 예시에서 우리는 data를 고정하고 callback의 변화를 주며 함수를 호출 하였다. </p>\n<p>즉, curried function으로 생성된 함수에서 우리가 의미있는 변화를 줄 수 있는 부분은 callback function이 유일하다. (값은 고정, 더블, 트리플 등등)</p>\n<p>위 방법으로 할바엔 array에 직접적으로 map 함수를 호출함이 낫다</p>\n<p>만약 우리가 callback을 먼저 받고, array를 나중에 받는면 더 나은 curried function 유틸을 제공할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span>\n    <span class=\"token parameter\">array</span> <span class=\"token operator\">=></span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span> \n    \n    <span class=\"token keyword\">const</span> withDouble <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">)</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">withDouble</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">withDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>curried function의 인자의 순서를 결정할 때는 가장 구제척(specific) 인것 부터 덜 구체적인 인자 순서로 전달하면 된다. </p>\n<p>덜 구체적인 인자는 항상 언어의 원시 타입이다. (불리언, 행렬, 숫자, 객체 등)</p>\n<p>다음과 같은 예시를 살펴 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Most specific => least specific </span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">prop</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></code></pre></div>\n<p>만약 위 예시에서, key와 obj의 순서를 바꿔 주었다면, obj(key)와 같은 형태가 될테데 이는 obj[key]를 직접 호출하는것과 하등 차이가 없다. </p>\n<p>반면, 위와 같은 순서로 인자를 전달 함으로서, 우리는 공통의 key를 사용 하여 obj 를 탐색할 수 있다.</p>\n<p>위의 map 함수와 prop그리고 data(array)를 조합하여 다음과 같은 기능을 제공할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Most specific => least specific </span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">prop</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">const</span> propName <span class=\"token operator\">=</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jamon'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Shirley'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Kent'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Sarah'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Ken'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// [ 'Jamon', 'Shirley', 'Kent', 'Sarah', 'Ken' ]</span></code></pre></div>\n<h3>CH10. Using the Associative Property in JavaScript Functional Compositions</h3>\n<blockquote>\n<p>Associative Property란 결합 법칙을 뜻한다.</p>\n</blockquote>\n<blockquote>\n<p>Functional Compositions란 합성 함수를 뜻한다.</p>\n</blockquote>\n<p>이번에는 FP에서 수학적인 결합법칙과 동등한 방식으로 곱셈이나 덧셈에서의 결합이 결과값에 영향을 미치지 않고 합성 함수에 적용되는지 보여줄 것이다. 또한 작은 합성(composition)의 조합으로 같은 큰 합성과 같은 역할을 하는지 보여줄 것이다. </p>\n<p>정리하자면, 같은 연산자들이 나열 되었을때, 우리가 조합하는 방식이 결과에 영향을 주지 않는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Associative Property</span>\n    \n    <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>같은 방식은 합성 함수에도 적용 된다. </p>\n<p>앞서 들었던 예시에서 만들었던 <code class=\"language-text\">compose</code> 함수를 다르게 합성 하여도 연산의 결과는 같아질 것이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Associative Property</span>\n    \n    <span class=\"token keyword\">const</span> withExuberance <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n      repeat<span class=\"token punctuation\">,</span> \n      exclaim<span class=\"token punctuation\">,</span> \n      scream\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'I love egghead'</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">withExuberance</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 예시에서 같은 기능을 제공하기 위해 부분 합성(sub-compositions)을 만들어볼 수 있다. 그럼에도 위와 같은 결과를 제공한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// ((repeat,exlaim),repeatExcitedly)</span>\n    <span class=\"token keyword\">const</span> repeatExcitedly <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n      repeat<span class=\"token punctuation\">,</span> \n      exclaim\n    <span class=\"token punctuation\">)</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n        repeatExcitedly<span class=\"token punctuation\">,</span>\n        scream \n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// (repeat,(exclaim,scream))</span>\n    <span class=\"token keyword\">const</span> screamLoudly <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n      exclaim<span class=\"token punctuation\">,</span> \n      scream\n    <span class=\"token punctuation\">)</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n        repeat<span class=\"token punctuation\">,</span> \n        screamLoudly\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<p>순수 함수로 짜여진 코드에서 연산의 순서만 지킨다면, 어떠한 부분 함수를 하여도 연산의 결과는 같아 질 것이다. </p>\n<h3>CH11. Debug Functional Compositions with a Logging Side Effect in JavaScript</h3>\n<p>FP에서 함수를 합성하는 작업은 필연적으로 불투명한 과정을 포함한다. </p>\n<p>이 뜻은 함성 함수를 활용하는 과정에서 data의 변화를 가시화 할 수 있는 명확한 방법이 존재하지 않는다는 것이다. 생각해보면 여러개의 함수를 합성하여 결과값을 딱 내놓는 과정에서, 순차적인 data의 흐름을 명확하게 보기 어려움이 당연하다. </p>\n<p>이러한 특징은 잘 작동할때는 상관이 없지만, 디버깅 하기 어렵다는 단점이 있다. <code class=\"language-text\">trace</code> 함수와 같은 기능을 제공하여 우리는 pointfree programming를 지속하며 합성의 과정을 볼 수 있다. </p>\n<blockquote>\n<p>Tacit programming, also called point-free style, is a programming paradigm in which function definitions do not identify the arguments (or “points”) on which they operate.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">trace</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 <code class=\"language-text\">trace</code> 함수는 msg와 curry의 결과로 넘겨받은 현재의 인자를 인자로 받는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> bookTitles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'The Culture Code'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Designing Your Life'</span><span class=\"token punctuation\">,</span> \n      <span class=\"token string\">'Algorithms to Live By'</span>\n    <span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">trace</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">const</span> slugify <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after lowercase'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>lowerCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after split'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before split'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">const</span> slugs <span class=\"token operator\">=</span> <span class=\"token function\">slugify</span><span class=\"token punctuation\">(</span>bookTitles<span class=\"token punctuation\">)</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>slugs<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 예시에서 join과 map의 순서과 우리의 예상과는 달랐고, 그 결과 예상치 못한 답이 나왔다고 생각 해 보자. </p>\n<p><code class=\"language-text\">trace</code>  함수는 curried function으로서 두번의 인자를 받는다. </p>\n<ul>\n<li>첫번째 호출시 인자는 이 <code class=\"language-text\">trace</code>  함수가 갖게 될 메시지로서 데이터의 흐름에 포함되어 있지 않은 정보라 생각하면 될거 같다.</li>\n<li>두번재 호출시 받는 인자는 어떤 값으로서 사실상 모든 값이 들어갈 수 있다. 이 값은 console.log에 찍히게 될 것 이다.</li>\n</ul>\n<p>여기에서 만약 우리가 다음과 같이 작성 하였다면, 매 순간 msg와 x를 명시해서 넘겨줘야 하기 때문에 코드가 훨씬 장황해질 것이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">trace</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span>x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></code></pre></div>\n<p>따라서 FP에서 compose의 기능을 잘 활용하여 인자(data)를 물 흐르듯이 넘겨주는 상상을 해보도록 하자.</p>\n<h2>한줄 정리 :</h2>\n<p>절대적인 것은 없다! 모든지 상황에 맞춰 융통성 있게, 재밌게 작성하자!</p>\n<p>이것으로 <strong>Just Enough Functional Programming</strong> 정리가 모든 끝났다. 이제 FP에 관하여 껍질을 햝은 정도의 느낌을 받은 것 같다. 천천히 점진적으로 학습하여 FP와 FRP 등의 패러다임의 아이디어를 내 것으로 만들도록 하겠다.</p>","frontmatter":{"title":"Just Enough Functional Programming - 3탄","date":"July 11, 2019"}}},"pageContext":{"slug":"/daily/2019-07-11/","previous":{"fields":{"slug":"/daily/2019-07-10/"},"frontmatter":{"title":"스크럼과 XP (헨릭 크니버그) 나머지 절반을 읽고..."}},"next":{"fields":{"slug":"/daily/2019-07-12/"},"frontmatter":{"title":"ReactJS에서 props.render vs props.children vs HOC"}}}}}