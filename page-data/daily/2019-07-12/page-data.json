{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-07-12/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"6422490d-57f8-5c85-aa4e-e40650627bc4","excerpt":"공부 이유 : Composition over Inheritance ReactJS에서 선호되는 방식 중 하나이다. 또한, JS에서도 선호되는 방식이다. React docs 에서 학습을 하다보면, 항상 Composition 과 Inheritance 를 비교하며 children…","html":"<h2>공부 이유 :</h2>\n<blockquote>\n<p>Composition over Inheritance</p>\n</blockquote>\n<p>ReactJS에서 선호되는 방식 중 하나이다.</p>\n<p>또한, JS에서도 선호되는 방식이다.</p>\n<p><a href=\"https://reactjs.org/docs/composition-vs-inheritance.html#containment\">React docs</a> 에서 학습을 하다보면, 항상 Composition 과 Inheritance 를 비교하며 children 패턴을 보여준다.</p>\n<p>이해는 가지만, 나는 이것이</p>\n<ol>\n<li>render를 통해 직접 컴포넌트를 주입하는 방식(props.render)</li>\n<li>Higher order component 를 통해 감싸는 방식</li>\n</ol>\n<p>과 무엇이 다른지 명확하게 알지 못해 알아 보았고, 정리하게 되었다.</p>\n<h2>공부 내용 :</h2>\n<h3>props.render</h3>\n<p>다음과 같은 이름으로도 불린다.</p>\n<ul>\n<li>render prop</li>\n<li>render callback</li>\n<li>function as child</li>\n</ul>\n<p>이 방법은 함수를 갖는 props를 값으로서 전달하여 사용하는 방식이다.</p>\n<p>이를 통하여 서로 다른 두개의 컴포넌트를 분리된(decouppled) 상태에서 데이터 교환이 용이하게 한다.</p>\n<p>그렇다면 props.render와 props.children은 무엇이 다른가?</p>\n<p>사실상 하는 기능은 동일하다. 단지 다른 사용 방법을 가지고 있을 뿐이다.</p>\n<p>조금 더 컴팩트하고 명시적으로(props.render) 작성하냐, 혹은 구조적으로 짜임새 있게(props.children) 작성 하냐의 차이인것 같다 .</p>\n<h3>HOC는</h3>\n<p>higher order component이다</p>\n<p>감싸질 컴포넌트를 감싸는 컴포넌트로 넣어 주어 감싸진 컴포넌트를 반환하는 방식이다.</p>\n<p>어떻게 보면 FP에서 currying 과 유사한 패턴이라 보면 될것 같다. (난중에 확인)</p>\n<p>주로 초기값을(컴포넌트 기준으로는 대부분 props) 해당 컴포넌트에 전달하는 역할을 한다.</p>\n<p>또는, 컴포넌트에 따라, 상황에 따라 다른 view를 랜더링하기 위한 wrap로도 사용되는 것 같다.</p>\n<p>단점으로는,</p>\n<ul>\n<li>사용에 너무 많은 코드를 작성해야 한다.</li>\n<li>props 이름의 중복이 될 수 있다. (아래 서술)</li>\n<li>다수의 HOC를 합성하면, props가 어디에서 부터 온 것인지 알기 힘들어진다.</li>\n</ul>\n<h3>그래서 둘중에 무엇을 왜 사용해야 하는가</h3>\n<p>결국에는 <strong>cross-cutting concerns</strong>에 대처하기 위해 사용된다.</p>\n<blockquote>\n<p>잠깐, cross-cutting concerns이 뭔데?</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">**cross-cutting concerns는 쉽게 생각하여, 반복적으로 나오는 코드를 뜻한다.**\n\n조금 더 자세히 얘기하면,\n\nA **Concern** is a term that refers to a part of the system divided on the basis of the functionality.\n\n즉, Concern은 기능을 기준으로 나뉘어진 시스템의 일 부분이다. (관심사라 직역 되지만, 관심을 가져야 할 부분으로 읽는게 나을듯 하다.)\n\n이 관심을 갖는 기능들을 한대 관통하는 기능. 즉 여러번 사용될 수 있는 기능에 대한 고려를 의미하는 듯 하다.</code></pre></div>\n<p><a href=\"https://stackoverflow.com/questions/23700540/cross-cutting-concern-example\">출처</a></p>\n<blockquote>\n<p>즉, 반복적으로 같은 패턴으로 사용된 기능을 제작하기 위해 위 두 기능을 사용한다.</p>\n</blockquote>\n<p>보통, 이 공통의 관심사를 HOC를 통해 구현하곤 했다. 하지만, 위에 서술한 HOC의 단점들이 존재하여 이를 해결 할 render props를 활용하여 공통의 관심사를 구현한다.</p>\n<h3>HOC → render props 패턴으로 갈경우</h3>\n<p>우리는 props에 의해 변수를 덮어 쓸 걱정을 안해도 된다.</p>\n<p>생각해보면, component에서 props를 통해 넘어가는 값은 객체와 같다.</p>\n<p>따라서, state 값을 넘겨주면 key, value에 따라 props로 넘어 가는 것이다.</p>\n<p>이는 또 달리 말하여 두 컴포넌트에 공통된 규칙을 따라야 하므로 종속성이 강해 진다 할 수 있다.</p>\n<p>(정확히 같은 변수명을 사용 해야 하고, 변수명 충돌을 방지 해야 한다)</p>\n<p>반면, render와 같은 방법으로 함수를 통해 compose하게 된다면,</p>\n<p>특정된 key를 통해 value를 참조 하는게 아닌, 넘어오는 인자를 통해 접근이 가능하다.</p>\n<p>즉, 인자의 순서만 맞춘다면 변수의 이름을 중복할 걱정이나, 변수명을 정확히 쓸 걱정을 안해도 된다.</p>\n<p>따라서, 순서만 맞게 사용하면 되고, 이로 인해 조금 더 나은 분리가 가능하다</p>\n<h2>한줄 정리 :</h2>\n<p>대부분의 경우 HOC보다는 함수를 넘겨 받는 식으로 코드를 작성함이 더 나은 코드인것 같다.</p>\n<p>종속성을 줄이고, 코드양을 줄여 같은 기능을 제공할 수 있다면 이를 사용함이 맞다.</p>\n<p>그럼에도 불구하고 HOC가 사용되도 좋은 패턴은 여전히 존재한다. (db연결이나 redux store연결 등 다양하다)</p>\n<p>결국, 이 또한 상황에 맞게 융통성을 갖추어 사용하도록 하자.</p>\n<p>다음에는 어찌하여 React hooks가 위 HOC, render props를 대체할 수 있다 하는지 알아보겠다.</p>\n<p>레퍼런스</p>\n<p><a href=\"https://medium.com/tandemly/im-breaking-up-with-higher-order-components-44b0df2db052\">I’m Breaking up with Higher Order Components. - tandemly - Medium</a></p>","frontmatter":{"title":"ReactJS에서 props.render vs props.children vs HOC","date":"July 12, 2019"}}},"pageContext":{"slug":"/daily/2019-07-12/","previous":{"fields":{"slug":"/daily/2019-07-11/"},"frontmatter":{"title":"Just Enough Functional Programming - 3탄"}},"next":{"fields":{"slug":"/daily/2019-07-13/"},"frontmatter":{"title":"bash_profile 와 zsh에 관한 글"}}}}}