{"componentChunkName":"component---src-templates-blog-post-js","path":"/boost-camp-membership/25/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"1fea068a-7677-5ed5-8e47-c493e4c60fdf","excerpt":"Kubernetes 삽질기 1 햇갈리는 부분 정리 약 결함 k8s 는 loosely coupled 되어 있다. 오로지 라벨 만으로 템플릿을 확인하여, 작업된다. Rolling update 새로운 pod 띄우고, 기존 pod 바꾸고… 반복한다. 실제로는 현재 pod…","html":"<h2>Kubernetes 삽질기 1</h2>\n<h2>햇갈리는 부분 정리</h2>\n<h3>약 결함</h3>\n<p>k8s 는 loosely coupled 되어 있다. 오로지 라벨 만으로 템플릿을 확인하여, 작업된다.</p>\n<h3>Rolling update</h3>\n<p>새로운 pod 띄우고, 기존 pod 바꾸고… 반복한다.</p>\n<p>실제로는 현재 pod가 존재하는 replica set을 그대로 하나 더 생성하여 옮기고 삭제하는 작업이 진행된다.</p>\n<p>문제는, 이미 새로운 replica set으로 다 옮겨진 이후에는, 기존의 것으로 바꿔치기가 어렵다. (이미 삭제 되었으므로)</p>\n<h2>yaml, 어떻게 작성할까</h2>\n<p>k8s에서는 object라고 불린다.</p>\n<p>참고: <a href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/\">https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/</a></p>\n<blockquote>\n<p>Kubernetes Objects are persistent entities in the Kubernetes system.</p>\n</blockquote>\n<blockquote>\n<p>A Kubernetes object is a “record of intent”</p>\n</blockquote>\n<p>object’s configuration에서는 두가지 요소가 존재한다: spec, status</p>\n<p>spec은 desired state for the object</p>\n<p>status는 actual state of the object</p>\n<h3>구성 요소</h3>\n<ul>\n<li><code class=\"language-text\">apiVersion</code> - Which version of the Kubernetes API you’re using to create this object</li>\n<li><code class=\"language-text\">kind</code> - What kind of object you want to create</li>\n<li><code class=\"language-text\">metadata</code> - Data that helps uniquely identify the object, including a <code class=\"language-text\">name</code> string, <code class=\"language-text\">UID</code>, and optional <code class=\"language-text\">namespace</code></li>\n<li><code class=\"language-text\">spec</code> - What state you desire for the object</li>\n</ul>\n<h2>production cluster와 dev cluster를 어떻게 동기화 할까</h2>\n<p>ㅇㅋ 이제 production cluster를 어떻게 구성해야 하는지 감이 오기 시작했다.</p>\n<p>그러나, 이 구성을 어떻게 다른 동료 개발자들이 사용할 수 있게 도움이 되는 도구로 만들것인지는 또 다른 얘기다.</p>\n<p>가장 큰 문제는, 배포된 k8s 인프라를 어떻게 개발에 활용하는가 이다.</p>\n<p>물론, 이미 배포된 k8s api를 연결하여 개발 하는것은 말도 안되는 일이다.</p>\n<p>이를 위해 상상해 볼 수 있는 것들은 다음과 같다.</p>\n<ol>\n<li>현재 prod의 인프라 구성과 동일한 구성을 그대로 복붙하여 dev 환경을 따로 만들고, 그 api에 연결하여 새로운 기능을 개발한다</li>\n<li>현재 prod의 인프라 구성과 동일한 구성을 그대로 복붙하여 개발자당 하나의 개별 dev 환경을 만든다</li>\n<li>현재 prod의 인프라 구성에 대한 명세를 로컬에서 그대로 실행시켜 인프라를 구축하낟.</li>\n</ol>\n<h3>1, 2번에 대해…</h3>\n<p>k8s는 label에 붙은 name이나 주어진 ip 로 cluster 내에서 통신한다.</p>\n<p>물론, 이 값들은 cluster내에서만 유효하기 때문에, 외부에서 이 값으로 바로 접근이 안된다.</p>\n<p>서비스를 개발하며, 로컬에서 계속해서 서버도 껏다 키고 http요청을 보내기도 해야 하는데, prod에서 사용될 주소 규칙이 아닌, 외부에서 사용하는 규칙(api)을 사용하여 개발하면 그 값을 다시 바꿔야 하는 문제가 있다.</p>\n<p>물론, 그 값을 환경변수로서 dev/prod 에 따라 다른값을 넣도록 할 수 도 있지만 그 방법 또한 무언가 어색함이 있다.</p>\n<p>또 다른 문제로는, 새로운 기능이 아닌 특정 기능을 수정해야 할 경우이다.</p>\n<p>이미 인프라가 올라가 있고, 그 인프라의 api에 포함되어있는 기능을 수정하여 테스트를 하기 위해서는 무언가 어색한 작업들이 분명 동반될 것이다.</p>\n<p>그럼에도 인프라 관리자의 입장에서는 일단 구현하기 가장 쉬운 방법이다.</p>\n<p>결론적으로…</p>\n<p>staging 단계의 인프라 하나는 필요할 듯 하지만, 개발자를 위해 1개 이상의 dev 인프라를 클라우드에 구축할 필요는 없어 보인다.</p>\n<h3>3번에 대해 …</h3>\n<p>가장 이상적인 방법이지만, 그 방법이 명확히 그려지지 않는다.</p>\n<p>일단, k8s와 docker의 특성상 어느 환경에서도 인프라 전체가 구축됨은 맞다. 그러나 몇가지 어색한? 이해가 가지 않는? 부분들이 존재한다.</p>\n<ol>\n<li>k8s를 AWS에서 사용하게 되면, k8s의 인터페이스를 통해 AWS에서 제공하는 다양한 리소스를 사용하게 된다. 아무리 k8s가 제공하는 인터페이스를 따라 어느 환경에서도 구성이 된다 하지만, 그 결과가 동일할까?</li>\n<li>그냥 kubectl로 하면 되나? 그러면 minikube 같은 도구는 왜 있는거지?</li>\n<li>AWS에서 제공하는 DB나, EBS, EFS같은 도구를 사용하게 된다면 로컬에서 이 환경을 어떻게 동일하게 구축할 수 있을까? 호스트의 PS를 활용해야 하나?</li>\n<li>만약 EKS를 쓰거나, kops를 쓸 경우 master 는 어떻게 작동되나? 결국 우리가 개발하는 앱은 워커 노드에 들어갈텐데… 마스터 또한 프로비전 되어야 하나</li>\n<li>앱에서 사용되는 모든 쿠버 스타일 API는 어떻게 작성/관리 되어야 하는가… swagger?</li>\n<li>RBAC 가 필요한데, 로컬과 클라우드가 다르면 어떻게 작동해야 할까</li>\n<li>AWS에서 제공하는 DB나, EBS, EFS같은 도구를 사용하게 된다면 로컬에서 이 환경을 어떻게 동일하게 구축할 수 있을까? 호스트의 PS를 활용해야 하나?</li>\n</ol>\n<p>설정을 Runtime에서 바꿔치기 하는 방법도 존재하는 듯 하다.</p>\n<p>service-overrides가 있고, 값이 바꿔치기 된다.</p>\n<p>어떤 파일을 두어 로컬에서 바꿔치는 방법도 있고,</p>\n<p>helm을 활용하는 방법도 있을 것 같다.</p>\n<p>몇가지 보이는 방향들이 있다.</p>","frontmatter":{"title":"부스트캠프 2019 맴버쉽 25","date":"September 19, 2019"}}},"pageContext":{"slug":"/boost-camp-membership/25/","previous":{"fields":{"slug":"/boost-camp-membership/24/"},"frontmatter":{"title":"부스트캠프 2019 맴버쉽 24"}},"next":{"fields":{"slug":"/boost-camp-membership/26/"},"frontmatter":{"title":"부스트캠프 2019 맴버쉽 26"}}}}}