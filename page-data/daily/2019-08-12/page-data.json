{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-08-12/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"7aece363-0121-53f1-a63e-ae245e524ba0","excerpt":"역시 하나를 알려면 제대로 알아야 한다. 막상 Redux에서 Thunk를 활용할 고민을 하니, 어떻게 활용할지 잘 감이 안왔다. 이 Thunk 덕분에 바로 dispatch…","html":"<p>역시 하나를 알려면 제대로 알아야 한다.</p>\n<p>막상 Redux에서 Thunk를 활용할 고민을 하니, 어떻게 활용할지 잘 감이 안왔다.</p>\n<p>이 Thunk 덕분에 바로 dispatch를 안하고, 비동기적으로 실행될 수 있다고 하는데, 어떻게 사용될지 잘 이해가 안갔다.</p>\n<p>기계적으로 사용할 수 있지만, 부스트캠프에서 느꼈듯이, 이해를 바탕으로 설계를 어느정도 해야 배우는것도 많고 시행착오도 많이 줄일 수 있다.</p>\n<p>그래서 오늘은 Redux-Thunk에 대해 조금 더 알아보고자 찾아봤다.</p>\n<h2>Thunk가 뭐야?</h2>\n<p>네이버 사전을 검색하면 다음과 같이 나온다.</p>\n<blockquote>\n<p>thunk : 푹, 탁 ((둔탁한 소리)) <del>???</del></p>\n</blockquote>\n<p>전혀 이해가 안 간다.</p>\n<p>위키 피디아를 찾아봤다.</p>\n<blockquote>\n<p>In computer programming, a thunk is a subroutine used to inject an additional calculation into another subroutine.</p>\n</blockquote>\n<p>아하!!</p>\n<p>사실상, 위의 문장에 Redux-thunk의 사용 방법이 모두 명시 되어있다.</p>\n<p>리덕스는 다른 서브루틴에 <strong>추가적인 연산을 주입(inject)하기</strong> 위한 서브루틴이다.</p>\n<p>주입이라는 부분이 키워드 인것 같다.</p>\n<p>위에 내가 갖고 있던 비동기 는 집어치워 버리고, 이 부분만 생각하자.</p>\n<p>(항상 생각하지만, 결과만 알아서는 하나도 쓸모 없다. 존재 이유와 함께 사용 방법을 알아야 한다. )</p>\n<p>또 다음줄에서는 다음과 같이 표현한다.</p>\n<blockquote>\n<p>Thunks are primarily used to delay a calculation until its result is needed, or to insert operations at the beginning or end of the other subroutine.</p>\n</blockquote>\n<p>이 부분에는 Thunk의 존재 이유(용도)에 대해 명시되어 있다.</p>\n<p>위의 연산의 주입을 통하여 이루고자 하는것은 두가지 이다.</p>\n<ul>\n<li>하나의 연산의 결과를 원할때 까지 연산을 미룬다. (그냥 필요할 때 실행 하겠다는 뜻)</li>\n<li>서브 루틴의 첫 부분이나 끝 부분에 또다른 연산을 추가한다.</li>\n</ul>\n<p>그냥 쉽게 생각해서 다음과 같은 코드를 생각하면 될듯 하다 .</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 'hypot' is a binary function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hypot</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 'thunk' is a function that takes no arguments and, when invoked, performs a potentially expensive</span>\n<span class=\"token comment\">// operation (computing a square root, in this example) and/or causes some side-effect to occur</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">thunk</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// the thunk can then be passed around...</span>\n<span class=\"token function\">doSomethingWithThunk</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...or evaluated</span>\n<span class=\"token function\">thunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// === 5</span></code></pre></div>\n<p>아니면 더 쉽게</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// calculation of 1 + 2 is immediate</span>\n<span class=\"token comment\">// x === 3</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\">// calculation of 1 + 2 is delayed</span>\n<span class=\"token comment\">// foo can be called later to perform the calculation</span>\n<span class=\"token comment\">// foo is a thunk!</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span></code></pre></div>\n<p>그렇다!</p>\n<p>실행 시에 비싼 연산을 지불해야 하는 기능을 선언과 동시에 실행하는게 아니라, 필요할때만 실행할 수 있도록 감싸는 패턴이다.</p>\n<p>자 이제 Thunk가 무엇을 의미하는지 알았다.</p>\n<p>Redux의 thunk도 사실상 같은 의미를 갖고 구현된 기능이다(middleware)</p>\n<h2>Redux Thunk</h2>\n<p>일단 Thunk의 핵심 코드를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">thunk</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단하다.</p>\n<p>하지만 아직 이 쓰임새를 잘 모르겠다.</p>\n<p>이해는 잘 안 가지만, 일단 위 코드의 내용을 한번 짚고 가자.</p>\n<p>일단 위 thunk 함수는 계속하여 함수를 반환값으로 갖는다.</p>\n<p>그러면서 이전 매개변수는 내부 변수(클로져를 통하여) 로 보관된다.</p>\n<p>굳이 표현하자면, 이렇게 쓰이겠다. (물론 이렇게는 아니다. 그냥 이해를 돕기 위함이다)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> thunkWithStore <span class=\"token operator\">=</span> <span class=\"token function\">thunk</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SOME_STORE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> thunkWithStoreAndNext <span class=\"token operator\">=</span> <span class=\"token function\">thunkWithStore</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SOME_NEXT</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>그리고 코드의 내용을 보면 알겠지만, action의 타입이 가장 중요한 역할을 함을 볼 수 있다.</p>\n<p>즉, 우리가 어떤 방식으로 action을 인자로 받는데, 그 action이 함수라면, 그 함수를 실행하라는 뜻이다.</p>\n<p>여기서 이런 패턴이 익숙치 않으면 이렇게 생각할 수 있다.</p>\n<blockquote>\n<p>action이 함수인데, store.dispatch를 받아서 action을 실행한다라… 굳이 왜?</p>\n</blockquote>\n<p>왜냐면, 이 thunkWrapper는 action으로 함수를 받게 되고,</p>\n<p>그 함수에는 하나 이상의 함수를 실행하는, 마치 트리거의 역할을 하는 것이다.</p>\n<p>그냥 쉽게 생각해서, 여러개의 함수를 감싸서 한번에 실행하기 위한 wrapper정도로 볼수 있겠다.</p>\n<p>(그래서 나는 함수의 이름이 thunk가 아니라 thunkWrapper가 되야 하지 않나 싶다)</p>\n<h2>redux-thunk의 용도</h2>\n<p>그 전에 짚고 넘어가자</p>\n<ul>\n<li>Redux의 action은 action creator를 통해 나오는 것이다. (action-creator가 함수라면, action은 이에 대한 결과물이다)</li>\n<li>action은 dispatch를 통해 store에 반영된다.</li>\n<li>기본적인 action creator와 dispatch를 사용하여 비동기 작업을 하는건 전혀 문제가 없다.</li>\n<li>그냥 비동기를 요청하면 된다. 단지, 결과로서 하나의 action을 반환하도록 설계 되어 있다.</li>\n</ul>\n<p>겉보기엔 아무 문제 없어 보인다.</p>\n<p>그러나, 일련의 과정이 하나의 행동이라 생각해보자.</p>\n<p>예를들어,</p>\n<ul>\n<li>요청이 시작되었다는 것</li>\n<li>요청이 완료 되었다는 것</li>\n<li>요청을 진행하는 것</li>\n</ul>\n<p>이 세가지의 행동을 하나의 action creator에 명시할 방법이 없다.</p>\n<p>그래서 할 수 있는 방법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//... 어떤 컴포넌트</span>\n<span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// mapdispatchToProps되어 있다 가정.</span>\n<span class=\"token comment\">// 따라서 fetchTodos외 requestTodos 는 dispatch임</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>filter<span class=\"token punctuation\">,</span> fetchTodos<span class=\"token punctuation\">,</span> requestTodos<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n<span class=\"token function\">requestTodos</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 요청이 시작되었음을 알리는 디스패처. 보통 spinner같은걸 돌려서 로딩 시작</span>\n<span class=\"token function\">fetchTodos</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 실제 요청 시작을 위한 디스패처.</span></code></pre></div>\n<p>뭔가 어색함이 느껴질 것이다.</p>\n<p>보통의 경우 requestTodos와 fetchTodos는 하나의 행동 같은데, 이 것을 사용 시마다 개발자가 명시해야한다.</p>\n<p>fetchTodos를 하기 위해서는 requestTodos 가 필요함이 분명한데도 말이다!</p>\n<p>여기서 thunk가 튀어 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchTodos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">requestTodo</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">fetchTodos</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">receiveTodos</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우리의 Action Creator에(action이 아니다!!!) 함수를 넣어줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">requestTodo</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">fetchTodos</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">receiveTodos</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 자리는 원래 action(보통 어떤 한 객체)가 왔어야 했는데, 함수가 왔다.</p>\n<p>그래서, 위의 thunk의 구현에 따라 dispatch 자리에 들어오는 인자를 함수로 갖고(여기선 store.dispatch)</p>\n<p>이하 내용을 실행하게 된다.</p>\n<p>위 코드를 조금 더 보기 편하게 정리하면 다음과 같다. (물론, arrow function와는 다른 특성이 있지만 그냥 보기 편하게!!)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">someActionFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">requestTodo</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">fetchTodos</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">receiveTodos</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그럼 아래 부분에서 action에 이 someActionFunc가 들어간 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">thunk</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서, someActionFunc는 thunk가 선언될 시점에서 아직 무엇인지 모르지만, 함수임을 알고 이를 실행하겠다는 뜻이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 미래의 someActionFunc</span>\n<span class=\"token function\">someActionFunc</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서, store에 있는 dispatch를 넘겨줌으로서, someActionFunc의 함수 내부에서 dispatch를 사용할 수 있는 것이다.</p>\n<p>thunk는 이러한 용도이다.</p>\n<h2>정리</h2>\n<p>그래서 redux-thunk가 뭐야?</p>\n<p>redux-thunk는 redux에서 필요한 사이드 이펙트 로직들을 구현하는데 도움이 되는 middleware이다.</p>\n<p>(이 side effect중에는 우리가 쉽게 접하는 async 처리가 있다. )</p>\n<p>redux에서는 무엇이(action) 어떻게(reducer) 변해야 할지 전달과(dispatch) 동시에 바로 store에 반영 되어야 하며, 이 작업은 sync하게 움직여야 한다.</p>\n<p>문제는, 우리가 sync하지 않은 작업이나, 작업을 하며 다른 부가적인 외부 작업을 동반하는 기능들을 plain redux의 구조로는 처리하기 어색(복잡?)하다 . 이를 보안하기 위해 만들어 졌다</p>\n<blockquote>\n<p>thunk사용시 필요에 따라 action creator의 반환값으로 action 대신 dispatch 함수를 넣어준다!!!</p>\n</blockquote>","frontmatter":{"title":"Redux-Thunk에 대한 생각 정리","date":"August 12, 2019"}}},"pageContext":{"slug":"/daily/2019-08-12/","previous":{"fields":{"slug":"/daily/2019-08-11/"},"frontmatter":{"title":"Normalizr, 객체(JSON) 분해하기"}},"next":{"fields":{"slug":"/daily/2019-08-13/"},"frontmatter":{"title":"간단한 리펙토링, filter대신 map으로!"}}}}}