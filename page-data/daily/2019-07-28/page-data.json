{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-07-28/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"a050ae54-6dfc-5568-aecc-75abc7f2c8d9","excerpt":"programmers 에서 진행하는 react 스터디를 통해 styled-jsx를 접하게 되었다. 처음에는 개인적으로 문법을 사용하는 방법이 워낙 괴랄하여 거부감이 많이 들었다. 뭔가, 너무 react 스럽지 않고 편법을 사용하는 느낌이였다. 그러나 이 기술이 Next.js…","html":"<p>programmers 에서 진행하는 react 스터디를 통해 styled-jsx를 접하게 되었다.</p>\n<p>처음에는 개인적으로 문법을 사용하는 방법이 워낙 괴랄하여 거부감이 많이 들었다.</p>\n<p>뭔가, 너무 react 스럽지 않고 편법을 사용하는 느낌이였다.</p>\n<p>그러나 이 기술이 Next.js에 기본으로 포함되어 있고, 생각보다 많이 사용한다는 점에 놀라며 학습을 하였다.</p>\n<h3>기본 문법</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>only <span class=\"token keyword\">this</span> paragraph will <span class=\"token keyword\">get</span> the style <span class=\"token operator\">:</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>style jsx<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      p {\n        color: red;\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>신기하게 위처럼 코드를 작성하면, 해당 컴포넌트 내부에 있는 <code class=\"language-text\">p</code> 태그에만 적용된다.</p>\n<p>이 <code class=\"language-text\">style</code> 은 기본적으로 해당 컴포넌트에만 적용 있고, 위 아래로 해당 스타일이 적용 되지 않는 특징이 있다.</p>\n<p>즉, 이 스타일은 해당 컴포넌트에 isolate 되어 독립된 스타일을 제공한다.</p>\n<p>어찌보면 이러한 스타일 방식은 React의 컴포넌트화를 통한 재사용성 증대와 독립성 증대를 따르는 모양세 인것 같다.</p>\n<p>문제는, 이러한 스타일 규칙이 해당 파일만의 규칙이 아닐 경우 생긴다.</p>\n<p>예를들어, 하나의 컴포넌트가 두개의 서로 다른 상황에서 사용될 경우 CSS의 특징상 별도의 상속 구조(선택자)를 선택해야 하는 경우가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.cs1 p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.cs2 p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러한 상황에서, p태그는 해당 컴포넌트에 있지만, cs1과 cs2는 상위 컴포넌트에 포함되어 있다고 가정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Ptag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>style jsx<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      p {\n        color: red;\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Cs1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'cs1'</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Ptag<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Cs2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'cs2'</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Ptag<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Ptag</code> 의 입장에서, <code class=\"language-text\">cs1</code> <code class=\"language-text\">cs2</code> 의 상황에 따라 <code class=\"language-text\">p</code> 태그에 다른 스타일을 적용해야 하는데 이에 대한 엘리멘트가 해당 컴포넌트에 없다.</p>\n<p>위에서 언급하였듯이 기본적으로 컴포넌트 속의 스타일은 그 컴포넌트에만 종속되고 고립된다.</p>\n<p>이 문제를 해결하기 위해서는 <code class=\"language-text\">:global()</code> 을 사용하면 된다.<br>\n<code class=\"language-text\">:global()</code> 은 해당 컴포넌트의 스코프를 벗어나 전역적으로 해당 요소를 찾는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Ptag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>style jsx<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      :global(cs1) p {\n        color: red;\n      }\n      :global(cs2) p {\n        color: blue;\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>또한, 전역적으로 사용해야 할 태그가 있다면 다음과 같이 사용하고, 컴포넌트의 범위를 벗어나 적용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>style jsx global<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      body {\n        background: red;\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 외에도 변수를 제공할 수 있고, SSR에서도 사용될 수 있으며, css preprocessor 등과 같이 사용이 가능하는 등 다양한 옵션들이 존재한다. 이는 추후에 따로 정리하도록 하겠다.</p>\n<p>결론적으로, styled-jsx 는 jsx를 스타일링할때 매우 도움이 됨을 느낄 수 있었다.</p>\n<p>기본적인 CSS문법을 그대로 활용하면 되므로 개발도 편하고, 퍼블리셔등과 작업할때 적용이 편할 것 같다 .</p>","frontmatter":{"title":"ReactJS에서의 styled-jsx","date":"July 28, 2019"}}},"pageContext":{"slug":"/daily/2019-07-28/","previous":{"fields":{"slug":"/daily/2019-07-27/"},"frontmatter":{"title":"JS에서 Spread syntax는 shallow copy일까 deep copy 일까"}},"next":{"fields":{"slug":"/boost-camp-challenge/day-11/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 11일차"}}}}}