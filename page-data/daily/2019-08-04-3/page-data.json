{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-08-04-3/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"e8a443f3-b5d4-5d85-bf02-c9db506a9b6a","excerpt":"다른 분이 질문하신 내용에 대한 나의 생각을 답변하였다. 그 내용을 기록한다. 질문 : 지난번 세션에서 리액트 컴포넌트에서는 상태를 최대한 배제하는 게 좋다고 하였다. 그렇다면 존의 리액트 전달 방식은 최대한 안쓰는게 좋은가? 그렇다면, state가 필요할때마다 component…","html":"<blockquote>\n<p>다른 분이 질문하신 내용에 대한 나의 생각을 답변하였다. 그 내용을 기록한다.</p>\n</blockquote>\n<h3>질문 : 지난번 세션에서 리액트 컴포넌트에서는 상태를 최대한 배제하는 게 좋다고 하였다.</h3>\n<ul>\n<li>그렇다면 존의 리액트 전달 방식은 최대한 안쓰는게 좋은가?</li>\n<li>그렇다면, state가 필요할때마다 component에 connect로 연결하다 보니 모든 component에 덕지덕지 붙게 되더라</li>\n<li>상태를 최대한 배제한 상태에서 모든 component에 connect를 연결하는 방식이 나은건지</li>\n<li>평소에 쓰던 방식대로 <code class=\"language-text\">props</code>를 전달해도 되는건지 궁금하다.</li>\n</ul>\n<h2>이에 대한 나의 답변</h2>\n<h3>[1] 일단 근본적으로 <code class=\"language-text\">Redux</code>가 필요한지, 필요하다면 왜 필요한지 고민을 해보셔야 할듯합니다.</h3>\n<ul>\n<li>모든 라이브러리 선택에는 tradeoff가 따름니다.</li>\n<li>Redux또한 예외는 아니며, 심지어 Redux는 사실 React에 종속된 라이브러리도 아닙니다.</li>\n<li>이에 대해서 제가 참 존경하는 개발자이신 Dan Abramov 씨는(redux, Create-react-app ~창시자?~ 개발자) 다음과 같은 글에서 Redux에 대한 생각을 전합니다.\n<a href=\"https://link.medium.com/l6XsMDx1SW\">[You Might Not Need Redux by @dan_abramov]</a></li>\n</ul>\n<p>결국, React component에서 상태를 배제하는 고민을 하기전에 왜 배제해야하고 redux를 왜 사용해야 하는지 명확한 이해가 필요합니다.</p>\n<h3>[2] Redux가 내 애플리케이션에 필요함을 알게된 경우, 로컬 State 사용에 대한 글이 <a href=\"https://redux.js.org/faq/organizing-state#do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate\">Redux F&#x26;Q</a>에 나와있습니다.</h3>\n<blockquote>\n<p>Using local component state is fine</p>\n</blockquote>\n<blockquote>\n<p>Find a balance that works for you, and go with it.</p>\n</blockquote>\n<p>결국, Redux 를 사용하는 것도 <code class=\"language-text\">선택</code>중에 하나였으므로,\n이를 어디까지 활용할지도 개발자의 <code class=\"language-text\">선택</code> 입니다.</p>\n<p>개발을 할수록 느끼는것은 best practice는 있어도 절대적인 방법은 없다는것 입니당</p>\n<p>결국, Redux의 존재이유(개발이유)에 따라 connect가 필요한 경우에는 사용하시면 되고,\n필요없다면 사용하지 않으셔도 됩니다.</p>\n<p>이를 고민하기 위해 도움이 될 자료는 <a href=\"https://redux.js.org/faq/organizing-state#do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate\">다음링크</a>에 있습니다.</p>\n<blockquote>\n<ul>\n<li>Do other parts of the application care about this data?</li>\n<li>Do you need to be able to create further derived data based on this original data?</li>\n<li>Is the same data being used to drive multiple components?</li>\n<li>Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?</li>\n<li>Do you want to cache the data (ie, use what’s in state if it’s already there instead of re-requesting it)?</li>\n<li>Do you want to keep this data consistent while hot-reloading UI components (which may lose their internal state when swapped)?</li>\n</ul>\n</blockquote>","frontmatter":{"title":"React에서 Redux사용시 local state를 사용하면 안되나?","date":"August 04, 2019"}}},"pageContext":{"slug":"/daily/2019-08-04-3/","previous":{"fields":{"slug":"/daily/2019-08-03/"},"frontmatter":{"title":"fork한 repo, 원본의 변화에 동기화 하기"}},"next":{"fields":{"slug":"/daily/2019-08-04-2/"},"frontmatter":{"title":"Conditional rendering 에서 empty component는 어떻게 처리할까?"}}}}}