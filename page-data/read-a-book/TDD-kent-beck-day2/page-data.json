{"componentChunkName":"component---src-templates-blog-post-js","path":"/read-a-book/TDD-kent-beck-day2/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"8d16bde3-98a8-53c9-919e-8693bafb6db6","excerpt":"원제 Test Driven Development: by example 제목 테스트 주도 개발 저자 Kent Beck ISBN 9788966261024 독서 기간 2019-09-24, 15:00-16:00 독서 량 5장 - 8장 이해가 잘 안갔던 부분들 자바의 문법 (p7…","html":"<table>\n<thead>\n<tr>\n<th>원제</th>\n<th>Test Driven Development: by example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>제목</td>\n<td>테스트 주도 개발</td>\n</tr>\n<tr>\n<td>저자</td>\n<td>Kent Beck</td>\n</tr>\n<tr>\n<td>ISBN</td>\n<td>9788966261024</td>\n</tr>\n<tr>\n<td>독서 기간</td>\n<td>2019-09-24, 15:00-16:00</td>\n</tr>\n<tr>\n<td>독서 량</td>\n<td>5장 - 8장</td>\n</tr>\n</tbody>\n</table>\n<h2>이해가 잘 안갔던 부분들</h2>\n<h3>자바의 문법 (p77)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Dollar</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Money</span> dollar<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Dollar</span><span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> amount <span class=\"token operator\">==</span> dollar<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 문법에서 <code class=\"language-text\">amount</code>는 Money의 protected property임에도 Dollar로 캐스팅 된 인스턴스에서 사용이 될 수 있음이 생소했다.</p>\n<h2>새로이 알게 된 내용들</h2>\n<h3>리펙토링의 과정 (p88)</h3>\n<p>이 부분에서 저자는 Money의 두 하위 클래스 (Dollar, Franc)의 사용이 많지 않아서 아예 없애버리고자 한다.</p>\n<p>여기서 보통의 나라면, 일단 두 클래스를 없애는 시도를 바로 하겠지만, 저자는 이러한 방식을 <code class=\"language-text\">큰 단계를 밟는것</code> 이라고 표현하였다.</p>\n<p>TDD를 보여주기 위해 단계적으로 어떤 방법을 거쳐야 하는지 정리해 주는데, 나는 이 부분이 단지 설명을 위한 보여주기 식 이상으로 TDD에 중요한 철학을 담고 있다고 생각한다.</p>\n<p>앞에서도 얘기가 나오지만, 설계를 통해 코드를 수정하는것이 아니라, Test를 통해 코드를 만들고, 이 Test를 수정함으로서 코드를 수정하는게 맞는 절차인듯 하다.</p>\n<p>이를 위해 저자는 어떤 가정( 하위 클래스에 대한 직접적인 참조가 적어지는게, 하위 클래스를 제거하기 위한 과정일 것이다)를 통하여 테스트를 우선 수정한다.</p>\n<p>앞으로 TDD를 수행하며 리펙토링을 하게 될 때, 내 머릿속의 설계를 바로 도입하기 보다는, 다음과 같은 절차로 진행함이 맞을것 같다.</p>\n<ol>\n<li>가정(가설)을 세우고</li>\n<li>이 가정을 도달하기 위해 테스트를 수정하고</li>\n<li>이에 맞게 코드를 수정하는</li>\n</ol>\n<h2>중요한 포인트</h2>\n<h3>테스트 주기에서… (p71)</h3>\n<ul>\n<li>테스트 작성, 컴파일 가능하게 하기, 실패하는지 확인하기, 실행하게 만들기 를 가능한 빠르게 진행해야 한다.</li>\n<li>그 이후 리펙토링(중복 제거)를 진행한다.</li>\n</ul>\n<p>위 첫 4 단계를 빠르게 함으로서 새 기능이 포함되더라도, 그 결과물에 대해 잘 알고 있는 상태가 될 수 있다.</p>\n<p>빠르게 잘 아는 상태를 도달하기 위해서 어떠한 죄라도(안좋은 설계, 중복 등) 저질를 수 있는데, 설계보다 속도가 중요하기 때문이다.</p>\n<p>하지만, 적절한 시기에 적절한 설계를 해야한다. 돌아가게 만들고, 그 다음에 올바르게 만들어라</p>","frontmatter":{"title":"Test Driven Development 2","date":"September 24, 2019"}}},"pageContext":{"slug":"/read-a-book/TDD-kent-beck-day2/","previous":{"fields":{"slug":"/read-a-book/TDD-kent-beck-day1/"},"frontmatter":{"title":"Test Driven Development 1"}},"next":{"fields":{"slug":"/read-a-book/XP-kent-beck-day1/"},"frontmatter":{"title":"Extreme Programming Explained 2/E 1"}}}}}