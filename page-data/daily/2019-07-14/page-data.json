{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-07-14/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"8806041e-c5fe-5e38-9aa2-5a21d9f80904","excerpt":"공부 이유 JS를 공부하며 항상 햇갈리는 개념들이 있었다. 나는 JS를 공부한다 해야 하나 NodeJS를 공부한다 해야하나 JS event loop은 도대체 무엇일까 JS는 왜, 어떻게 single thread, non blocking io일까? NodeJS가 browser…","html":"<h2>공부 이유</h2>\n<p>JS를 공부하며 항상 햇갈리는 개념들이 있었다.</p>\n<ul>\n<li>나는 JS를 공부한다 해야 하나 NodeJS를 공부한다 해야하나</li>\n<li>JS event loop은 도대체 무엇일까</li>\n<li>JS는 왜, 어떻게 single thread, non blocking io일까?</li>\n<li>NodeJS가 browser에서 쓰이던가? 안 쓰이면 그 사이에는 무엇이 있던가</li>\n</ul>\n<p>등등… 위 내용을 하나씩 정리 해 보도록 한다.</p>\n<p>이번 챕터에서는 JS, nodeJS, v8 등 혼란스러운 용어 정리를 해보고</p>\n<p>다음에는 event loop과 관련된 디테일한 정리를 해보도록 한다.</p>\n<h2>공부 내용</h2>\n<p>일단, 용어에 대한 정리는 wiki에 영어로 너무 잘 나와있다. 그중 중요한 부분만 적어본다.</p>\n<h3><a href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a></h3>\n<ul>\n<li>JavaScript often abbreviated as JS, is a high-level, <strong>interpreted programming language</strong> that c<strong>onforms to the ECMAScript specification</strong></li>\n<li>The vast majority of websites use it, and major web browsers have a <strong>dedicated JavaScript engine to execute it.</strong></li>\n<li>JavaScript supports event-driven, functional, and imperative (including object-oriented and prototype-based) programming styles.</li>\n<li>It has APIs for working with text, arrays, dates, regular expressions, and the DOM, but the language itself <strong>does not include any I/O</strong>, such as networking, storage, or graphics facilities. <strong>It relies upon the host environment</strong> in which it is embedded to provide these features.</li>\n<li>The terms Vanilla JavaScript and Vanilla JS refer to <strong>JavaScript not extended by any frameworks or additional libraries</strong>.</li>\n</ul>\n<h3><a href=\"https://en.wikipedia.org/wiki/Node.js\">Node.js</a></h3>\n<ul>\n<li>Node.js is an open-source, cross-platform <strong>JavaScript run-time environment</strong> that executes JavaScript code <strong>outside of a browser.</strong></li>\n<li>Node.js lets developers use <strong>JavaScript to write command line tools and for server-side scripting.</strong></li>\n<li>Node.js has an <strong>event-driven architecture capable of asynchronous I/O</strong>. These design choices aim to optimize <strong>throughput</strong> and <strong>scalability</strong> in web applications with many input/output operations, as well as for real-time Web applications</li>\n</ul>\n<h3><strong><a href=\"https://en.wikipedia.org/wiki/Chrome_V8\">Chrome V8(aka. V8)</a></strong></h3>\n<ul>\n<li>Chrome V8, or simply V8, is an open-source <strong>JavaScript engine</strong> developed by The Chromium Project for Google Chrome and Chromium web browsers.</li>\n<li>V8 <strong>compiles</strong> JavaScript directly <strong>to native machine code before executing</strong> it</li>\n<li>The compiled code is <strong>additionally optimized (and re-optimized) dynamically at runtime</strong>, based on heuristics of the code’s execution profile.</li>\n</ul>\n<h3><a href=\"https://en.wikipedia.org/wiki/Libuv\">libuv</a></h3>\n<ul>\n<li>libuv is a multi-platform C library that provides <strong>support for asynchronous I/O based on event loops.</strong></li>\n</ul>\n<hr>\n<p><strong>위 내용을 한번 정리 해 보자</strong></p>\n<ul>\n<li>\n<p>JS</p>\n<ul>\n<li>우리가 사용하는 <strong>‘언어’.</strong></li>\n<li><strong>웹브라우저에서 고유한 JS engine으로 실행됨 (크롬브라우저→V8 engine)</strong></li>\n<li>I/O와 관련된 어떠한 API도 제공하지 않는다. I/O기능은 호스트 환경에 의해 의지한다.</li>\n<li>Vanila JS는 어떠한 framework, library로 오염되지 않은 순수한 JS를 뜻함</li>\n<li>ES의 표준을 따름</li>\n</ul>\n</li>\n<li>\n<p>NodeJS</p>\n<ul>\n<li>JS가 사용되는 <strong>‘실행 환경’(run-time env.)</strong></li>\n<li>JS를 브라우저 밖에서 사용하기 위해 고안됨</li>\n<li>command line tool과 server side 스크립팅을 위해 사용됨</li>\n<li>이를 통해 유저에게 전달하기 전에 동적 컨텐츠 생성 가능</li>\n<li>이벤트 드리븐, 비동기 I/O를 가능케 함(I/O는 JS에서 제공치 못했던 부분임을 기억)</li>\n<li>이를 통해 <strong>throughput와 scalability에서 이득</strong></li>\n</ul>\n</li>\n<li>\n<p>V8</p>\n<ul>\n<li>JS가 사용되는 <strong>‘엔진’</strong></li>\n<li>사용된다는 의미는 JS코드를 파싱하고 변환하여 실행 가능한 커맨드로 바꾸는 작업을 함</li>\n<li>즉, 바로 <strong>네이티브하게 실행 가능한 기계 언어로 변환</strong>하는 장치</li>\n</ul>\n</li>\n<li>\n<p>Libuv</p>\n<ul>\n<li>NodeJS를 만들기 위해 고안된 도구</li>\n<li>실질적으로 nodeJS의 async IO를 관리하기 위한 도구를 제공하는 녀석.</li>\n<li><strong>우리가 알고 있는 Event-Loop이 사실 이 라이브러리가 구현 하는 것이다.</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>마지막으로 다음을 한번 더 정리하자.</strong></p>\n<p>JS engine vs JS runtime env</p>\n<ul>\n<li><strong>JS Engine은</strong> JS코드를 파싱하여 실행 가능한 <strong>코드로 변환하기 위한 장치</strong></li>\n<li><strong>JS Runtime Env 는</strong> JS가 가지고 있는 태생적인 한계(외부와의 소통. 즉 I/O)<strong>를 보충하기 위한 장치.</strong></li>\n</ul>\n<p>그리고 둘은 독립적인 존재가 아니라 포함 관계이다.</p>\n<p>즉,</p>\n<p>NodeJS는 V8과 Libuv위에 구현되어 있고,</p>\n<p>비슷하게 웹브라우저(크롬 등)에서도 JS engine과 JS Runtime Env 위에 구현되어 있을 것이다.</p>\n<p>웹 브라우저 또한 event-loop등의 기능을 제공하기 때문에,</p>\n<p>구현한 라이브러리는 다를 수 있지만, 비슷하게 보고 학습하면 될듯 하다.</p>\n<h2>한줄 정리</h2>\n<p>JS는 언어</p>\n<p>NodeJS는 JS 실행 환경</p>\n<p>V8은 JS 엔진</p>\n<p>끗</p>","frontmatter":{"title":"JS 이해하기 [JS, nodeJS, V8, Libuv]-1탄","date":"July 14, 2019"}}},"pageContext":{"slug":"/daily/2019-07-14/","previous":{"fields":{"slug":"/daily/2019-07-13/"},"frontmatter":{"title":"bash_profile 와 zsh에 관한 글"}},"next":{"fields":{"slug":"/boost-camp-challenge/day-1/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 1일차"}}}}}