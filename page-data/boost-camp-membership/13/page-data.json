{"componentChunkName":"component---src-templates-blog-post-js","path":"/boost-camp-membership/13/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"1402f459-95ad-5713-9aa3-8f69398bf8f2","excerpt":"오늘의 고민들 React에서 어떻게 하나의 변화에 대해, 연쇄적으로 다른 변화를 이르킬 수 있을까 Redux, context 등을 고려하지 않고, 순수하게 React의 사고 방식으로 부모에서 자녀로 props…","html":"<h2>오늘의 고민들</h2>\n<h3>React에서 어떻게 하나의 변화에 대해, 연쇄적으로 다른 변화를 이르킬 수 있을까</h3>\n<p>Redux, context 등을 고려하지 않고, 순수하게 React의 사고 방식으로 부모에서 자녀로 props를 내리는 형태로 가정하자.</p>\n<p>만약, 부모의 객체에서 어떤 이벤트가(여기서는 클릭) 발생하여 그로 인해 부모와 자식에 존재하는 값이 동시에 변해야 한다면 어떻게 해볼 수 있을까?</p>\n<p>가장 쉬운 방법은, 자식에 있는 값은 부모로 올리는 것이다.\n다음 예제에서는, 부모의 <code class=\"language-text\">초기화</code> 버튼을 누르면, 그에 따라 부모에 있는 값과(totalCount) 자식에 있는 값(count)이 동시에 초기화(0으로 설정)이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 부모</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>totalCount<span class=\"token punctuation\">,</span> setTotalCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTotalCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> setCount<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setCount<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>clearCount<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>초기화<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>가능은 하겠지만, 만약 자식이 여러개가 생기고 그 값을 모두 부모가 들고 있어야 한다고 생각해보자.. 힘들어 진다.</p>\n<p>물론 무조건 잘못된 방법은 아니지만, 이 경우에 각각의 count에 대한 값은 Counter가 들고 있는 형태가 더 적절할것 같다. 그리하여, Counter 스스로도 독립 가능한 컴포넌트로서의 역할을 할 수 있도록 하면 좋을듯 하다.</p>\n<p>두번째로 할 수 있는 방식은, 변화에 대한 기준값을 자식에 제공하는 것이다.\nReact의 life cycle 혹은 hooks를 잘 활용하면, 변화에 대한 어떤 기준점에 대해서 특정 행동을 취할 수 있다.\n이러한 방식이 조금 더 React 스러운 방식같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 부모</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>totalCount<span class=\"token punctuation\">,</span> setTotalCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTotalCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter clear<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>totalCount <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>clearCount<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>초기화<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 자식</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> clear <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 부모로부터 내려오는 clear라는 props의 변화에 따라 useEffect를 실행한다.</span>\n  <span class=\"token comment\">// 만약, clear가 되어 totalCount가 0 이 되었다면, 이 컴포넌트 또한 0으로 설정한다.</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clear<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>clear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 작성 되었듯이, useEffect의 두번째 인자로 관찰 하고자 하는 인자를 제공하여 그 값에 변화가 생길때 useEffect를 실행하고자 하였다.\n이렇게 된다면, 상위의 어떤 이벤트가 발생하는지는 모르지만 그 결과로 어떤값(totalCount)이 0 이 된다면, 이 컴포넌트 또한 업데이트를 진행한다.</p>\n<h2>오늘의 회고</h2>\n<p>근래에 여러 일들이 곂치고, 나름 바쁜 일들이 있어서 회고를 진행하지 못하였다.\n계속하여 시간을 내지 못한 나의 모습을 반성하고, 오늘부터 다시 회고를 시작하고자 한다.</p>\n<p>나의 성장을 확인하고, 돌아보기 위해서는 회고는 필수적인것 같다.</p>\n<p>나와의 약속을 먼저 지킬 수 있는 사람이 되도록 하자.</p>","frontmatter":{"title":"부스트캠프 2019 맴버쉽 13","date":"September 07, 2019"}}},"pageContext":{"slug":"/boost-camp-membership/13/","previous":{"fields":{"slug":"/boost-camp-membership/12/"},"frontmatter":{"title":"부스트캠프 2019 맴버쉽 12"}},"next":{"fields":{"slug":"/boost-camp-membership/14/"},"frontmatter":{"title":"부스트캠프 2019 맴버쉽 14"}}}}}