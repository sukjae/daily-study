{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-08-03/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"ce2bdc6a-29df-5494-920e-c9014cf22e8a","excerpt":"TL;DR 요즘 프로젝트를 하며 Github을 통해 fork를 많이 한다. 문제는, 내 생각과는 다르게 원본(upstream repository) 에서의 수정 (ex, master 갱신 등) 이 forked된 나의 repo에는 반영이 되지 않더라. 항상 clone…","html":"<h2>TL;DR</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 맨날 겪던 일\n원본repo(upstream) -&gt; 내 계정에 fork -&gt; fork된 repo를 local에 clone\n-&gt; 원본repo에 변화 가 일어남!!\n-&gt; 내 계정에 fork된 레포와 로컬 레포는 변경 반영 안됨!!\n-&gt; 어떻게 동기화하지!?!?!?</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 해결 법\n-&gt; local repo에서 원본 repo remote 등록\n-&gt; local repo에서 원본 repo fetch\n-&gt; local repo에서 fetch 한 branch merge\n-&gt; 최종적으로 local에서 합쳐진 repo push 하기!!</code></pre></div>\n<p>요즘 프로젝트를 하며 Github을 통해 fork를 많이 한다.</p>\n<p>문제는, 내 생각과는 다르게 원본(upstream repository) 에서의 수정 (ex, master 갱신 등) 이 forked된 나의 repo에는 반영이 되지 않더라.</p>\n<p>항상 clone을 해서 학습을 하였고, 사람들과 함께 개발한 적이 없어 이런 부분에 대해 미숙함이 있었는데, 이번 기회에 해결법에 대해 찾고 정리하였다.</p>\n<h4>[팁: 우리가 사용하는 <code class=\"language-text\">Fork</code>는 사실 Github에 제공하는 기능일 뿐이다.]</h4>\n<blockquote>\n<p>Github도 Git이라는 기술위에 움직이고, 이 기술위에 더 편의적인 기능을 제공하기 위해 서버측에서 제공하는 Github의 부가적인 기능이다. <br>\n사실 Git에는 Fork라는 기능은 없고, Github에서 제공하는 Fork는 Git의 Clone에 부가적인 기능을 제공하는 것 뿐이다. <br>\n그래서 아래와 같이 귀찮은 로직이 필요한듯 하다. <br>\n참고 링크: <a href=\"https://stackoverflow.com/a/6286877\">Are Git forks actually Git clones?,stackoverflow</a><br></p>\n</blockquote>\n<h3>순서 1: 내 Fork 의 <code class=\"language-text\">remote</code> 수정하기.</h3>\n<p>내 <code class=\"language-text\">remote</code> 를 수정해야 한다.</p>\n<p>처음 fork를 떴을때, remote에는 <code class=\"language-text\">origin</code> 만 포함하고 있고, 이는 fork한 나의 레포의 위치이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git remote -v\n&gt; origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n&gt; origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</code></pre></div>\n<p>여기서 알 수 있듯이, 나의 git은 내 원본 repo에 대해 전혀 알지 못한다.</p>\n<p>그렇다면, git에 fork한 나의 repo와 더불어 원본 repo에 대한 정보를 주기 위해선 어떻게 해야 할까?</p>\n<p>다음과 같이 <code class=\"language-text\">remote</code> 를 수정하면 된다. 여기에선 <code class=\"language-text\">upstream</code> 이라는 이름으로 등록하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</code></pre></div>\n<p>이제 나의 local git에서 remote에 대한 연결이 끝났다.</p>\n<p>이제 이 정보를 바탕으로 원본 repo(upstream)와 내 repo(fork)를 동기화하는 방법을 정리해 본다.</p>\n<p>자세한 내용을 <a href=\"https://help.github.com/en/articles/configuring-a-remote-for-a-fork\">이 링크의</a> 내용대로 하면 된다.</p>\n<h3>순서2: 내 Local Fork 동기화하고 remote에 반영하기</h3>\n<p>위에서 내 local repo에 remote에 대한 정보로 upstream을 추가 하였다 .</p>\n<p>이제 이 상태에서 upstream을 <code class=\"language-text\">fetch</code> 하면 local 브랜치인 <code class=\"language-text\">upstream/master</code> 에 원본의 변경사항이 저장된다. (이 경우는 master 브랜치에 변화를 주었다 가정하였다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git fetch upstream\n&gt; remote: Counting objects: 75, done.\n&gt; remote: Compressing objects: 100% (53/53), done.\n&gt; remote: Total 62 (delta 27), reused 44 (delta 9)\n&gt; Unpacking objects: 100% (62/62), done.\n&gt; From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY\n&gt;  * [new branch]      master     -&gt; upstream/master</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">pull</code> 은 <code class=\"language-text\">fetch</code> 하고 <code class=\"language-text\">merge</code> 하는 작업이다. 차이를 인지하자.</p>\n</blockquote>\n<p>그 다음 다시 <code class=\"language-text\">master</code> 브랜치로 <code class=\"language-text\">checkout</code> 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout master\n&gt; Switched to branch &#39;master&#39;</code></pre></div>\n<p>여기까지 정리하면,</p>\n<ol>\n<li>위에서 <code class=\"language-text\">upstream/master</code> 에 원본으로 부터 받은 정보를 저장하였고,</li>\n<li><code class=\"language-text\">master</code>로 체크아웃 하였다.</li>\n</ol>\n<p>이제 <code class=\"language-text\">master</code> 브랜치에 <code class=\"language-text\">upstream/master</code> 정보를 <code class=\"language-text\">merge</code> 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git merge upstream/master\n&gt; Updating a422352..5fdff0f\n&gt; Fast-forward\n&gt;  README                    |    9 -------\n&gt;  README.md                 |    7 ++++++\n&gt;  2 files changed, 7 insertions(+), 9 deletions(-)\n&gt;  delete mode 100644 README\n&gt;  create mode 100644 README.md</code></pre></div>\n<p>이렇게 되면, 우리는 Local 환경에서 원격에 있던 원본(upstream)과 우리의 작업물을 동기화 할 수 있다.</p>\n<p>이제 이 취합된 데이터를 우리의 원격의 fork repo에 반영하려면, <code class=\"language-text\">push</code>하면 된다.</p>\n<p>자세한 내용은 <a href=\"https://help.github.com/en/articles/syncing-a-fork\">이 링크의</a> 내용대로 하면 된다.</p>","frontmatter":{"title":"fork한 repo, 원본의 변화에 동기화 하기","date":"August 03, 2019"}}},"pageContext":{"slug":"/daily/2019-08-03/","previous":{"fields":{"slug":"/boost-camp-challenge/day-15/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 15일차"}},"next":{"fields":{"slug":"/daily/2019-08-04-3/"},"frontmatter":{"title":"React에서 Redux사용시 local state를 사용하면 안되나?"}}}}}