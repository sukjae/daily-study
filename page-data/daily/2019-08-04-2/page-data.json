{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-08-04-2/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"673cc8f1-6a67-58df-b345-fc4be27b46a7","excerpt":"처음 든 생각은 Fragment를 이용하는 방법이였다. 반환값으로  를 제공하면, React스럽게 진행될것이라 예상하였다. 이전에 다른 분이 짜놓으신 코드에서는 상황별로 component가  를 반환하게끔 처리 되어있었는데, 이 부분이 ts-check…","html":"<p>처음 든 생각은 Fragment를 이용하는 방법이였다.</p>\n<p>반환값으로 <code class=\"language-text\">&lt;&gt;&lt;/&gt;</code> 를 제공하면, React스럽게 진행될것이라 예상하였다.</p>\n<p>이전에 다른 분이 짜놓으신 코드에서는 상황별로 component가 <code class=\"language-text\">false</code> 를 반환하게끔 처리 되어있었는데, 이 부분이 ts-check에 걸려서 알아보던 중 위 방법을 생각하게 되었다 .</p>\n<h4>디테일한 정보</h4>\n<h4>Modify toggle hoc returning falsy valuse(<code class=\"language-text\">false</code>)</h4>\n<ul>\n<li>changed return value from <code class=\"language-text\">false</code> to <code class=\"language-text\">&lt;&gt;&lt;/&gt;</code> (Fragments)</li>\n</ul>\n<h4>Detailed error Log</h4>\n<ul>\n<li>JSX element type ‘false | Element’ is not a constructor function for JSX elements.</li>\n<li>Type ‘false’ is not assignable to type ‘Element’.</li>\n</ul>\n<h4>ts-check error 이미지</h4>\n<p><img src=\"https://user-images.githubusercontent.com/8156543/62411589-22cc2380-b630-11e9-8409-0a6010dbe393.png\"></p>\n<h4>위 에러가 발생하는 부분</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/// HOC로 wrapping하는 컴포넌트이다</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ToggleWrapped</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>show <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러나, 감사하게도 다른 분이 <code class=\"language-text\">Fragment</code>보다 <code class=\"language-text\">null</code>을 사용하는 방법에 대한 의견을 주셨고,</p>\n<p>곧 이 방법이 더 좋은 방법임을 알게 되었다.</p>\n<p>이에 대한 나의 설명은 내가 올린 글로 대체한다.</p>\n<h2>질문자님의 의견 1 : &#x3C;>&#x3C;/> 와 달리 null을 쓰는게 좋지 않을까? 이유는 왜 그럴까?</h2>\n<blockquote>\n<p>제 생각에도 (Fragment보다 null이 ReactDOM의 입장에서 더 저렴해서) 라는 해석이 맞는것 같습니다.</p>\n</blockquote>\n<ul>\n<li>이에 대해 다른 코드들은 어떻게 해결하나 찾아봤더니, 역시 <code class=\"language-text\">null</code> 을 통해서 conditional하게 component를 제공하는것 같습니다.</li>\n<li>아래 스샷 포함합니다.</li>\n</ul>\n<h3>예시 1, <code class=\"language-text\">ReactJS</code></h3>\n<ul>\n<li><code class=\"language-text\">ReactJS</code> source code중에서 <code class=\"language-text\">ReactEmptyComponent-test.js</code> 부분에서 다음과 같이 empty component를 체크하는 test 코드를 작성했음을 볼 수 있습니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/8156543/62420450-7e002380-b6cd-11e9-872c-3d92c933f4c2.png\"></p>\n<h3>예시 2, <code class=\"language-text\">material-ui</code></h3>\n<ul>\n<li>비슷한 예시로 <code class=\"language-text\">material-ui</code> 에서 <code class=\"language-text\">ListItemLink</code> 을 분기하기 위해서 <code class=\"language-text\">null</code>을 활용하고 있습니다.</li>\n<li>우리의 경우에는, component로서 <code class=\"language-text\">null</code>을 반환하기에 약간의 차이가 있지만,</li>\n<li>그래도, empty component를 표현하기 위해서 <code class=\"language-text\">null</code>을 사용하고 있음을 알 수 있습니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/8156543/62420463-b56ed000-b6cd-11e9-8f5c-196d0d0aaa1b.png\"></p>\n<h2>질문자님의 의견 2 : In rare cases… 왜 드문 경우에일까?</h2>\n<p>질문자님의 질문 : <a href=\"https://reactjs.org/docs/conditional-rendering.html#preventing-component-from-rendering\">docs의 내용을 보면</a>, 다음과 같은 글을 확인할 수 있다. 여기서 conditional하게 rendering하는것은 흔한 패턴인데 왜 rare case라 표현했을까?</p>\n<blockquote>\n<p>In rare cases you might want a component to hide itself even though it was rendered by another component. To do this return null instead of its render output.</p>\n</blockquote>\n<blockquote>\n<p>이 부분에 대해서는 위의 사용패턴에서 알아볼 수 있을것 같습니다.</p>\n</blockquote>\n<ul>\n<li>제 생각에는, 결론적으로 component 자체가 자신이 empty가 될지, 혹은 무언가를 표출할지를 결정하기 보다</li>\n<li>component를 사용하는 주체가 이를 결정하는 상황이 훨씬 많고, 적합하기 때문인것 같습니다.</li>\n<li>우리는 HOC를 활용하여 살짝 상황이 다른것 같습니당</li>\n</ul>\n<h3>1. component 자신이 자신을 표현할지 말지 결정하는 사례</h3>\n<ul>\n<li>예를 들어 아래 예시는 <a href=\"https://reactjs.org/docs/conditional-rendering.html#preventing-component-from-rendering\">언급하신 docs에</a> 있는 예시 입니다.</li>\n<li>다음 <code class=\"language-text\">WarningBanner</code> 컴포넌트는, 자기자신이 자신을 숨기거나 보여지거나 하는 결정권을 들고 있습니다.</li>\n<li>이를 통하여 자신이 null혹은 jsx로 구성된 component를 반환하는 예시입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">WarningBanner</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n     <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n         <span class=\"token comment\">// .. something</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<h3>2. component 사용하는 주체가 해당 component를 보여줄지 말지 결정하는 사례</h3>\n<ul>\n<li>반면, 일반적으로 conditional하게 보여주기 위해서는,</li>\n<li><code class=\"language-text\">WarningBanner</code>는 무조건 jsx 로 구선된 component를 반환하게 하고,</li>\n<li>이를 사용하는 주체가 보여줄지 말지 결정하는 방식이 많이 사용되고,</li>\n<li>그러한 예시를 활용하고 있는것이 제가 보여드린 <code class=\"language-text\">ReactJS</code>와 <code class=\"language-text\">Material-ui</code>의 예시에서 사용하는 방법인듯 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Outter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>show <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>some text<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>some text<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>some text<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>추가적으로…</h3>\n<ul>\n<li>사실 2번의 예시와 비슷하게 다음과 같은 방법도 있을것 같습니다.</li>\n<li>물론, 여기서도 <code class=\"language-text\">props.show</code> 가 <code class=\"language-text\">null</code>이면 <code class=\"language-text\">null</code>이고, <code class=\"language-text\">false</code>이면 <code class=\"language-text\">false</code> 를 방출하기 때문에 적절히 사용해야 할듯 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Outter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Conditional rendering 에서 empty component는 어떻게 처리할까?","date":"August 04, 2019"}}},"pageContext":{"slug":"/daily/2019-08-04-2/","previous":{"fields":{"slug":"/daily/2019-08-04-3/"},"frontmatter":{"title":"React에서 Redux사용시 local state를 사용하면 안되나?"}},"next":{"fields":{"slug":"/daily/2019-08-04-1/"},"frontmatter":{"title":"JS의 switch-case에서 block단위 처리 방법"}}}}}