{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-07-21/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"4df4fe40-9bf2-51f6-b83c-9e1421bbf1de","excerpt":"은 함수(function)에만 기본적으로 내장된다.  ?? 함수를 제외한 다른 자료형 (ex, array, object, number, etc…","html":"<h3><code class=\"language-text\">.prototype</code> 은 함수(function)에만 기본적으로 내장된다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nfunc<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// {constructor: ƒ}</span></code></pre></div>\n<h3><code class=\"language-text\">.__proto__</code> ??</h3>\n<p>함수를 제외한 다른 자료형 (ex, array, object, number, etc)에서는 <code class=\"language-text\">.prototype</code> 은 기본적으로 없다. 그러나 모든 기본 자료형에 <code class=\"language-text\">__proto__</code> 는 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// {constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}</span></code></pre></div>\n<h3><code class=\"language-text\">.__proto__</code> 안에 <code class=\"language-text\">constructor</code> 가 왜 있을까</h3>\n<p>위 코드에서 <code class=\"language-text\">.__proto__</code> 의 반환값은 객체이다. 그리고 이 객체안에 <code class=\"language-text\">constructor</code> 가 존재한다.</p>\n<p>그런데 이 <code class=\"language-text\">constructor</code> 은 함수 자료형에서만 기본적으로 <code class=\"language-text\">prototype</code> 에 내장되어 있는 프로퍼티 인데, 왜 함수 자료형이 아닌 보통의 객체에 포함되어 있는 것일까?</p>\n<p>그 이유는, 결국 obj 또한 기본 자료형이자 최상위에 존재하는 <code class=\"language-text\">Object</code> 를 통해 만들어지기 때문이다.</p>\n<p>즉, 위에서 객체 리터럴로 생성된 <code class=\"language-text\">obj</code> 는 <code class=\"language-text\">Object</code> 를 통해 만들어진 인스턴스 이고, 그로 인해 <code class=\"language-text\">Object</code> 가 가졌던 여러 기능들과 <code class=\"language-text\">constructor</code> 를 내포하고 있는 것이다.</p>\n<p>그리고, JS에서는 모든 것들이 객체로 표현되면서 동시에 함수와 연관을 갖고 있는데, 사실 <code class=\"language-text\">Object</code> 또한 함수일 뿐이다.</p>\n<p>이는 우리가 <code class=\"language-text\">Object</code> 를 사용할때, <code class=\"language-text\">new</code> 키워드를 사용함을 통해 유추할 수 있는데, 맞다.</p>\n<p><code class=\"language-text\">new</code> 키워드는 함수이기에 사용할 수 있는 것이고, 다음과 같이 알아볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object <span class=\"token comment\">// ƒ Object() { [native code] }</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span></code></pre></div>\n<p>위의 결과에서 유추하듯, <code class=\"language-text\">Object</code> 는 함수로 구현되어 있으며, 객체를 반환하고 생성할 수 있는 함수이다.</p>\n<h3>그래서 <code class=\"language-text\">.__proto__</code> 와 <code class=\"language-text\">.prototype</code> 이 시사하는 바는 무엇일까?</h3>\n<p>내가 내린 가장 심플한 결론은, 함수(<code class=\"language-text\">Foo</code> 라고 하자)를 통해 <code class=\"language-text\">.prototype</code> 이 생성되고, 이와 동시에 <code class=\"language-text\">.prototype.constructor</code> 가 생성된다.</p>\n<p>이 <code class=\"language-text\">.prototype</code> 에 다른 프로퍼티를 연결 하면, 위 함수 <code class=\"language-text\">Foo</code> 를 통해 생성될 인스턴스(혹은 객체, 여기선 <code class=\"language-text\">bar</code> 라고 하자) 들은 위 기능을 <code class=\"language-text\">.__proto__</code> 의 구성 요소로서 참조하게 되고, 결국에는 <code class=\"language-text\">Foo</code> 가 갖고 있는 <code class=\"language-text\">prototype</code> 으로 연결된 기능 혹은 값들을 <code class=\"language-text\">bar</code> 가 자신의 <code class=\"language-text\">__proto__</code> 를 거쳐 사용할 수 있는 것이다.</p>\n<p>그렇다면, 우리가 사용하는 기본 자료형을 포함해서 모든 것들이 <code class=\"language-text\">__proto__</code> 를 포함하고 있는데, 이는 무엇을 시사하는 것일까?</p>\n<p>내 생각에는 앞서 말햇듯이 JS는 모든것을 함수로서 구현 하였기 때문에, 해당 기본 자료형으로 만들어진 무언가(객체, 숫자, 변수 등등)은 모두 그 위의 함수(혹은 클래스?같은)의 기능을 <code class=\"language-text\">__proto__</code> 로서 제공 받은 것 이다.</p>\n<p>따라서, 우리가 거의 모든 자료형에서 <code class=\"language-text\">toString()</code> 함수를 사용할 수 있는 것도 위와 같은 맥락으로, 상위 함수 어딘가에서 <code class=\"language-text\">.prototype</code> 으로 정의되었던 <code class=\"language-text\">toString()</code> 함수를 구현체? 들이 사용할 수 있는 것이다. 그리고 이 <code class=\"language-text\">toString()</code> 은 현재 사용하는 값의 <code class=\"language-text\">__proto__</code> 로 연결 되는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// \"1,2,3\" //[constructor: ƒ, concat: ƒ,...toString: ƒ, ...]</span></code></pre></div>","frontmatter":{"title":"prototype과 __proto__에 대한 간단한 생각 정리","date":"July 21, 2019"}}},"pageContext":{"slug":"/daily/2019-07-21/","previous":{"fields":{"slug":"/daily/2019-07-20/"},"frontmatter":{"title":"Js에서 composition over inheritance가 뜻 하는게 무엇일까"}},"next":{"fields":{"slug":"/boost-camp-challenge/day-6/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 6일차"}}}}}