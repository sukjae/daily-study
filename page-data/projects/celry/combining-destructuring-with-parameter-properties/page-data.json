{"componentChunkName":"component---src-templates-blog-post-js","path":"/projects/celry/combining-destructuring-with-parameter-properties/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"d20c6942-f4ba-57ae-82e4-4722ad993066","excerpt":"문제 현재 작성하고 있는 entities 의 클래스들은 아래와 같은 형태를 띄고 있다. 여기서, , ,  를 private으로 만들고, getter…","html":"<h2>문제</h2>\n<p>현재 작성하고 있는 entities 의 클래스들은 아래와 같은 형태를 띄고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">HiData</span> <span class=\"token punctuation\">{</span>\n  my<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  is<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hi</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> _my<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> _name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> _is<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hiData<span class=\"token operator\">:</span> HiData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> my<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> is <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> hiData<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_my <span class=\"token operator\">=</span> my<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_is <span class=\"token operator\">=</span> is<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">my</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_my\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_is\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서, <code class=\"language-text\">my</code>, <code class=\"language-text\">name</code>, <code class=\"language-text\">is</code> 를 private으로 만들고, getter를 설정하기 위해 무수히 많은 코드가 중복된다.\n너무 장황해져서, 이를 줄일 수 있는 방법을 찾고자 한다.\n(결론을 말하자면, 아직 방법을 선택하지는 못했다…)</p>\n<h2>제약사항</h2>\n<ol>\n<li>모든 properties는 private이 되어야 함</li>\n<li>constructor 의 parameter는 객체의 형태여야 함</li>\n</ol>\n<p>private을 고수하는 이유는, 외부에서 변경이 안되게 함이다.(아예 immutable 하게 readonly로 가져갈 고민도 하는 중)</p>\n<p>object로 constructor에 넘기고자 하는 이유는 해당 클래스의 사용 편리성등이다. (인자의 순서를 딱 맞춰야 하는 불편함 등)</p>\n<h2>중복을 줄일 수 있는 부분</h2>\n<p>private 키워드를 생성하는 부분과 constructor에서 동일한(유사한) 이름에 할당하는 부분을 줄여볼 수 있을 것이다.\n그에 대한 이유에는 typescript의 <a href=\"https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties\">parameter-properties</a>에 있다.</p>\n<blockquote>\n<p>Parameter properties are declared by prefixing a constructor parameter with an accessibility modifier or readonly, or both. Using private for a parameter property declares and initializes a private member; likewise, the same is done for public, protected, and readonly.</p>\n</blockquote>\n<h3>parameter-properties 코드 샘플</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Octopus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Octopus</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>중복된 코드가 상당히 줄어 들었음을 알 수 있다.</p>\n<p>그러나 이 방법은 constructor 의 parameter로 destructuring 하였을때는 적용할 수 없다는 단점이 있다.\n이에 대한 토론은 다음에서 확인 해 볼 수 있다. <a href=\"https://github.com/Microsoft/TypeScript/issues/5326\">TS Issue 5326</a></p>\n<p>즉, 위 방법으로는 나의 2번 제약 사항을 충족할 수 없다.</p>\n<p>이에 대해 위 이슈에서 여러 아이디어들이 오고가는데, 그 중 많이 보이는 방법은 <code class=\"language-text\">Object.assign</code>을 사용하여 <code class=\"language-text\">this</code>와 연결하는 것이다.</p>\n<h3><code class=\"language-text\">Object.assign</code>을 사용하여 <code class=\"language-text\">this</code>와 연결하는 코드 샘플</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ExampleArgs</span> <span class=\"token punctuation\">{</span>\n  firstArg<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  otherArg<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">kwargs<span class=\"token operator\">:</span> ExampleArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExampleArgs</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이것은 나의 제약사항 중 2번째를 충족하지만, 다시 1번의 제약사항을 지킬 수 없게 된다. (public이 됨)</p>\n<h2>결론</h2>\n<p>결국 마땅한 방법을 찾지 못했다.</p>\n<p>나름 개인적으로 꼭 필요하다 생각한 두 조건이므로 그대로 유지하고, 중복 되더라도 일단은 코드를 장황하게 쓰기로 결정하였다. 이슈를 subscribe 해두어 기능이 추가되면 적용해야 겠다.</p>\n<p>혹시 이에 대한 좋은 해결방법이나 제약사항에 오류가 보이면 댓글 부탁드립니다~</p>","frontmatter":{"title":"TS에서 Combining destructuring with parameter properties","date":"March 31, 2020"}}},"pageContext":{"slug":"/projects/celry/combining-destructuring-with-parameter-properties/","previous":{"fields":{"slug":"/read-a-book/clean-architecture-day2/"},"frontmatter":{"title":"Clean Architecture 2"}},"next":null}}}