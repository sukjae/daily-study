{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-09-15/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"0121b203-d5b6-539d-b99c-ffede333c032","excerpt":"AWS SAM이란 AWS SAM은 CloudFormation의 확장. 이용을 더 쉽게 해주는 도구이다. SAM 업데이트 시에 데이터 유실 조심 Template 에서 Attribute 를 Update시에 data losses가 있을 수 있다. 이는, 기존의 stack…","html":"<h2>AWS SAM이란</h2>\n<p>AWS SAM은 CloudFormation의 확장.</p>\n<p>이용을 더 쉽게 해주는 도구이다.</p>\n<h2>SAM 업데이트 시에 데이터 유실 조심</h2>\n<p>Template 에서 Attribute 를 Update시에 data losses가 있을 수 있다.</p>\n<p>이는, 기존의 stack에서 업데이트시에 불가피하게 새로운 resource를 만들어야 할 때 발생한다.</p>\n<p>예를 들어, dynamodb에 Replacement 작업이 생길경우, 안에 들어있던 데이터가 모두 소실되고,</p>\n<p>cognito의 Replacement작업이 생길경우, 가입한 모든 유저 정보가 사라지는 것 이다 .</p>\n<p>CF에 리소스를 업데이트할때 발생 할 수 있는 옵션은 다음과 같다.</p>\n<ol>\n<li><strong>Update with no interruption:</strong> Your resource is updated in place without any disruption to normal use.</li>\n<li><strong>Update with some interruption:</strong> Your resource is still the same resource, but there will be some downtime as the update is applied.</li>\n<li><strong>Replacement:</strong> An entirely new resource is created to replace your existing resource.</li>\n</ol>\n<p>여기에서 Replacement가 중요한데, 이를 방지하기 위해서 Update시에 기존 resource를 retain하는 방법과 아예 delete를 iam으로 막는 방법 등이 있다.</p>\n<h2>phoenix server</h2>\n<p>마틴 파울러의 블로그 글에서 처음 접한 글이다.</p>\n<p>가장 간단하게 말하면, 이미 프로비전 된 서버에 직접적인 수정이 가해질 경우에 이게 쌓여서 Configuration Drift를 형성하고, 이는 지속적으로 쌓여 관리가 어려워진다.</p>\n<p>이를 방지하기 위해 주기적으로 서버를 무의 상태로 만들고(재로 만들고) 다시 살리는 흡사 불사조와 같은 구성을 해볼 수 있다.</p>\n<p>이 때에도 서버를 다 다운시킬때 데이터의 유실을 어떻게 처리할 지 고민해 봐야 하는데, 위의 SAM(CF) 업데이트 시의 데이터 유실과는 다른 양상이지만 (의도적으로 제거하기 때문에) 비슷한 고민을 해야하는듯 하다.</p>\n<p>백업을 어떻게 자동화하고, 유사시에 이를 백업에서 바로 살릴 수 있는 전략등이 필요하다.</p>\n<p>이에 대한 연장으로 드는 생각은, 모든 서버를 불사조 서버로 구성할 필요는 없을듯 하다.</p>\n<p>예를들어 cognito나 dynamodb등 과 같은 민감한 정보들은 따로 application stack으로 분리하여 관리함이 나을것 같다.</p>\n<p>어차피 Dynamodb나 cognito와 같은 서버는 AWS측에서 managing하므로 나의 책임이 아니다. 따라서 이를 굳이 phoenix server와 같은 방법으로 유지하는 작업이 불필요할 듯 하다.</p>\n<h2>Canary vs Blue-Green deployment</h2>\n<p>두 방법은 한가지 크게 비슷한 부분이 있는 듯 하다.</p>\n<ul>\n<li>두 방법 모두 동시에 이전 버전과 최신 버전(수정 버전)에 대한 구성(서버, 스택)을 동시에 띄어 놓는다.</li>\n</ul>\n<p>둘의 차이점은,</p>\n<p>Canary는 단계적으로 (점진적으로) traffic을 이동시키는 반면, blue-green은 준비가 되면 한번에 이동시킨다.</p>\n<p>(canary는 0:10, 1:9, 5:5…:0:10 이런식으로, blue green은 스위치 처럼 딱!)</p>\n<h2>오늘 본 좋은 자료들</h2>\n<p><a href=\"http://kief.com/automated-server-management-lifecycle.html\">Automated Server Management Lifecycle</a></p>\n<p><a href=\"http://kief.com/configuration-drift.html\">Configuration Drift</a></p>\n<p><a href=\"https://www.alexdebrie.com/posts/understanding-cloudformation-updates/\">CloudFormation의 업데이트에 대한 내용 및 이에 대한 대처 방법 정리</a></p>\n<p><a href=\"https://martinfowler.com/bliki/PhoenixServer.html\">PhoenixServer</a></p>","frontmatter":{"title":"AWS SAM 에서의 Update, 불사조 서버","date":"September 15, 2019"}}},"pageContext":{"slug":"/daily/2019-09-15/","previous":{"fields":{"slug":"/boost-camp-membership/20/"},"frontmatter":{"title":"부스트캠프 2019 맴버쉽 20"}},"next":{"fields":{"slug":"/boost-camp-membership/21/"},"frontmatter":{"title":"부스트캠프 2019 맴버쉽 21"}}}}}