{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-08-13/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"51c9dcf2-57fc-51eb-999a-7092af7f1430","excerpt":"정말 단순한 깨달음… 중첩된 객체에서 요소를 바꾸기 위해 filter를 굳이 사용 하지 않아도 되었었다…ㅎ 부스트 캠프 1…","html":"<blockquote>\n<p>정말 단순한 깨달음…</p>\n</blockquote>\n<h2>중첩된 객체에서 요소를 바꾸기 위해 filter를 굳이 사용 하지 않아도 되었었다…ㅎ</h2>\n<p>부스트 캠프 13일차에서 작성한 코드를 다시 살펴보니, 다음과 같은 코드가 있었다.\n<a href=\"https://github.com/sukjae/daily-study/blob/master/boost-camp/day-13.md#immutable\">후기 링크</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>folder_name <span class=\"token operator\">!==</span> folder_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>copiedFolder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>copiedFolder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>file_name <span class=\"token operator\">!==</span> file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>copiedFile<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        status<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>이 코드가 나오기 전에, <code class=\"language-text\">copiedFolder</code> 와 <code class=\"language-text\">copiedFile</code>를 생성하기 위한 추가적인 로직들이 존재한다…</p>\n<p>결국 이 코드로 원했던 것은, 객체와 배열이 중첩된 구조에서, 내부 배열의 일 부분을 바꾸고자 하였다.</p>\n<p>근데 오늘 가만히 생각해보니… 그냥 map으로 훨씬 간단하게 구현이 되더라.\n이 방법으로 접근하면, 따로 <code class=\"language-text\">copiedFolder</code> 와 <code class=\"language-text\">copiedFile</code>를 저장하기 위한 변수를 지정하지 않아도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span>\n  x<span class=\"token punctuation\">.</span>folder_name <span class=\"token operator\">!==</span> folder_name\n    <span class=\"token operator\">?</span> x\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>x<span class=\"token punctuation\">,</span>\n        files<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span> <span class=\"token operator\">=></span>\n          x<span class=\"token punctuation\">.</span>file_name <span class=\"token operator\">!==</span> file_name\n            <span class=\"token operator\">?</span> y\n            <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">...</span>y<span class=\"token punctuation\">,</span>\n                status<span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>첫 접근 방법은, filter를 두번 사용해서 포함하지 않는것, 또 한번은 포함하고 있는것으로 분리한 뒤 합치는 과정이였다면,</p>\n<p>두번째 접근법은, map을 통하여 이 두 로직을 한번에 해버린다.</p>\n<p>기록을 하는게 이래서 좋은것 같다.\n시간이 지나도, 중요한 부분을 다시 복기할 수 있고, 이를 통하여 한단계 더 발전이 가능하다.</p>\n<p>만얀, 이 부분에 대한 글을 작성하지 않았다면, 또 위의 방법처럼 코드를 작성했을 것이다.</p>\n<p>오늘은 두번째 방법을 알게된 것 이상으로 글을 쓰는 것에 대한 중요성을 느끼게 되었다.</p>","frontmatter":{"title":"간단한 리펙토링, filter대신 map으로!","date":"August 13, 2019"}}},"pageContext":{"slug":"/daily/2019-08-13/","previous":{"fields":{"slug":"/daily/2019-08-12/"},"frontmatter":{"title":"Redux-Thunk에 대한 생각 정리"}},"next":{"fields":{"slug":"/daily/2019-08-15/"},"frontmatter":{"title":"Netlify & Netlify CMS"}}}}}