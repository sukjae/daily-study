{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-07-27/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"9493ae94-5565-5afb-abb8-f39a4aeac0ea","excerpt":"어제 정리한 내용중에 immutable data pattern 이라는 부분이 있다. 여기서 정리 하였듯이, Primitive value를 제외한 모든 것이 mutable 하고, 이로 인한 사이드 이펙트를 방지하기 위해 copy…","html":"<p>어제 정리한 내용중에 immutable data pattern 이라는 부분이 있다.</p>\n<p>여기서 정리 하였듯이, Primitive value를 제외한 모든 것이 mutable 하고, 이로 인한 사이드 이펙트를 방지하기 위해 copy 를 만들어 값에 할당하는 방식을 취한다.</p>\n<p>다른분이 이에 대해 궁금해 하셔서 나는 js Spread syntax를 통해 shallow한 copy를 만들어 immutable data pattern을 모방하는 방법에 대해 설명했다.</p>\n<p>그러면서 다음과 같이 언급하며 내용을 시작하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">그래서 저는 다음과 같이 구현하였습니다.\n- 주의 하셔야 할게, spread 로 copy하면 shallow가 맞습니다.\n- 객체가 복잡해지면 deep copy할 전략이 필요합니다.\n- 그러나, 이 todolist 라는 객체가 값만을 포함하고 있고,\n- 변경 되는 부분을 매번 새로운 객체(혹은 배열)로 만들어 합쳐서 전달하고\n- 항상 이 약속을 지키면 위의 mutable한 성질로 인해 값이 변형될 걱정을 많이 줄일 수 있는것 같습니다.</code></pre></div>\n<p>그러나, 어떤분이 <code class=\"language-text\">spread 로 copy하면 shallow가 맞습니다</code> 라는 부분에 대해 다음과 같은 의문을 던지셨다.</p>\n<h4>다른분 A님의 의견</h4>\n<blockquote>\n<p>자바와 유사하게 프리미티브 밸류는 딥, 객체는 쉘로우 카피가 되는 것 같다. 그러므로 무조건 쉘로우 카피라고 말하는 것은 오해의 여지가 있을 것 같다.</p>\n</blockquote>\n<h4>나의 답변</h4>\n<blockquote>\n<p>자바스크립트에서는 object와 array가 spread 연산자를 사용할 수 있다. 둘 모두 js에서는 primitive value가 아니므로, Primitive value가 spread 로 deep 하게 copy 된다는 가정에 오류가 있는 것 같다.</p>\n</blockquote>\n<h4>이에 대한 다른분 A님의 답변</h4>\n<blockquote>\n<p>객체의 속성이 프리미티브 타입인 경우 딥카피가 된다.</p>\n</blockquote>\n<p>이에 대해 나는 추가적으로 언급하진 않았지만, 이 글에서 정리하려 한다.</p>\n<p>일단, 항상 이러한 논쟁은 단어에 대해 해석하고 있는 의미가 서로 다르기 때문에 나타나곤 한다.</p>\n<p>내 생각에 다른분 A님과 나는 Shallow copy와 Deep copy에 대해 다른 해석을 하고 있던것 같다.</p>\n<p>나는 다음 위키의 내용과 동일한 생각을 갖고 있다.</p>\n<h3>Shallow copy</h3>\n<ul>\n<li>aka field-by-field copy</li>\n<li>If the field value is a reference to an object (e.g., a memory address) it copies the reference, hence referring to the same object as A does, and if the field value is a primitive type it copies the value of the primitive type.</li>\n</ul>\n<h3>Deep copy</h3>\n<ul>\n<li>fields are dereferenced:</li>\n</ul>\n<p>즉, 다른분 A님이 말씀하신 <code class=\"language-text\">객체의 속성이 프리미티브 타입인 경우</code> 에 primitive를 지원하는 언어에서는 값(value) 이 복사되며, 이 또한 Shallow copy의 정의의 일부분이다.</p>\n<p>무조건 새로운 값이 복사된다고 Deep copy 되었다라고 해석하기에는 문제가 있다.</p>\n<p>결국, 우리가 관심 있어야 할 것은 어떠한 메소드의(여기에선 spread syntax) 결과가 항상 deep copy를 제공하는 가에 대한 여부이다.</p>\n<p>JS의 Spread syntax는 Shallow copy를 제공한다.</p>\n<h2>JS에서 Spread syntax는 언제부터 등장했을까?</h2>\n<p>ES2018부터 정식으로 등장할 예정이다.</p>\n<p>그러나 우리가 Reactjs등을 하며 너무나도 자연스럽게 사용할 수 있는 이유에는 Node lts 버전들이 이미 spread syntax를 지원해주기 때문이다. (땡큐 노드!)</p>","frontmatter":{"title":"JS에서 Spread syntax는 shallow copy일까 deep copy 일까","date":"July 27, 2019"}}},"pageContext":{"slug":"/daily/2019-07-27/","previous":{"fields":{"slug":"/boost-camp-challenge/day-10/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 10일차"}},"next":{"fields":{"slug":"/daily/2019-07-28/"},"frontmatter":{"title":"ReactJS에서의 styled-jsx"}}}}}