{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-07-08/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"8310bb27-4746-5816-b5a6-9276761b0ff7","excerpt":"공부 이유 : 요즘 functional programming과 reactive programming을 학습하며 다양한 Intro 강의들을 찾아 학습하고 있다. 그 중에서 오랜만에 깔끔하고 잘 만들어진 강의가 있어 정리해 보았다. [Just Enough Functional…","html":"<h2>공부 이유 :</h2>\n<p>요즘 functional programming과 reactive programming을 학습하며 다양한 Intro 강의들을 찾아 학습하고 있다. 그 중에서 오랜만에 깔끔하고 잘 만들어진 강의가 있어 정리해 보았다. <a href=\"https://egghead.io/courses/just-enough-functional-programming-in-javascript\">[Just Enough Functional Programming in JavaScript]</a></p>\n<h2>공부 내용 :</h2>\n<p>강의에서 강사는 말 그대로 Functional Programming을 바로 사용할 수 있을 정도의 적당한 레벨의 지식을 전달한다. 전체적인 느낌을 보기도 좋고, 실무에 부분 부분 적용 해 보기도 좋은 것 같다. </p>\n<h3>CH2. Modify Functions with Higher Order Functions in JavaScript</h3>\n<p>우선 HOF는 다음과 같은 특징을 갖고 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Higher Order Functions\n\n// 1. 함수를 인수로서 받을 수 있다 (Accepts a function as an argument)\n// 2. 새로운 함수를 반환할 수 있다 (Returns a new function)</code></pre></div>\n<p>강사는 이 HOF를 다음과 같은 코드로 보여주고 있다. </p>\n<p>코드를 해석하면 다음과 같다. </p>\n<ol>\n<li>count라는 공용 변수를 설정하였다. 이는 클로져 덕분에 가능하다.</li>\n<li>함수를 execute 함과 동시에 초기화를 해 주었다. </li>\n<li>초기화를 진행하며 연산에 쓰일 함수를 전달 하였는데, 이 부분이  FP에서 매우 중요한 생각의 흐름이다.</li>\n<li>execute되 함수를 새로운 변수에 할당하여, 이 함수를 여러번 재사용 한다. </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withCount</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Call count: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y\n    \n    <span class=\"token keyword\">const</span> countedAdd <span class=\"token operator\">=</span> <span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">countedAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">countedAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">countedAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>CH3. Avoiding Mutations in JavaScript with Immutable Data Structures</h3>\n<p>우선, mutable 과 immutable 한 data는 다음과 같은 차이점을 보이고 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Immutable Data\n\n// Mutable = can be changed after creation \n// Immutable = can&#39;t be changed after creation</code></pre></div>\n<p>FP에서 data 를 mutate하는 것은 안티패턴으로 여겨 지는데 이는 “breaks the purity of our functions”하기 때문이다. </p>\n<p>우리는 이를 방지 하기 위해(순수성을 께버리는 것을) 기존의 상태와 새로운 상태를 모두 포함하는 새로운 데이터를 반환한다. </p>\n<blockquote>\n<p>return brand new data structures that contain all the elements of the previous state of the data structure, plus our updates</p>\n</blockquote>\n<p>다음과 같은 예를 생각 해 보자 .</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MutableGlass</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount \n      <span class=\"token punctuation\">}</span>\n    \n      <span class=\"token function\">takeDrink</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">-</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">const</span> mg1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutableGlass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'water'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> mg2 <span class=\"token operator\">=</span> mg1<span class=\"token punctuation\">.</span><span class=\"token function\">takeDrink</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mg1 <span class=\"token operator\">===</span> mg2<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mg1<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">===</span> mg2<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">//true </span>\n    <span class=\"token comment\">//true</span></code></pre></div>\n<p>당연한 결과다. 하나의 생성자를 통해 생성된 인스턴스를 공유하고 있고, 동일한 인스턴스 내에 종속된 변수를 직접 건드렸고, 결과 적으로 동일한 값이다(동일한 객체이기도 하다).</p>\n<p>위와 같은 패턴은 사실 OOP에서 많이 사용되는데, 이를 FP 스타일로 변경하기 위해 완전히 새로운 인스턴스를 매 호출마다 반환하면 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImmutableGlass</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount\n      <span class=\"token punctuation\">}</span>\n    \n      <span class=\"token function\">takeDrink</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImmutableGlass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">-</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 부분에서 나는 이 패턴이 좋은 방법 인지는 모르겠다. 단지 하나의 metaphor로서 FP의 느낌을 이해하는데 도움을 줄 뿐이다. </p>\n<p>내 생각에 이 부분에서 다음과 같은 방식이 더 깔끔할 것 같다. </p>\n<ul>\n<li>method를 포함한 객체 전체를 반환하기 보다 값만 반환하여 가지고 놀던지</li>\n<li>아예 처음부터 생성자를 두번 사용해서 서로 다른 인스턴스를 만들던지</li>\n</ul>\n<h3>CH4. Refactor a Function to Use Currying in JavaScript</h3>\n<p>Currying은 앞서 작성한 글에 내 생각 대부분이 적혀 있다.</p>\n<ul>\n<li>초기화한 함수를 공유하는데 도움이 되고</li>\n<li>다항 연산자를 받는 함수에서 항수를 낮춰 단항으로 낮출 수 있고</li>\n</ul>\n<p>등등</p>\n<p>이 강의에서 Arity 라는 개념이 언급되는데 이는 항수로서 함수의 인자나 연산자의 개수를 말한다. 이 arity의 개수에 따라 다음과 같이 분류 되며</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 1. unary\n// 2. binary \n// 3. ternary \n// 4. quaternary</code></pre></div>\n<p>결국 currying의 목표 중 하나는 다음과 같다고 할 수 있다. </p>\n<blockquote>\n<p>Thus the act of currying can be described as taking a multivariate function and turning it into a series of unary functions.</p>\n</blockquote>\n<h3>CH5. Identify Side Effects by Comparing Pure and Impure JavaScript Functions</h3>\n<p>강의에서 순수함수에 대한 언급이 나온다</p>\n<blockquote>\n<p>A pure function is a function that derives its output solely from its inputs, and causes no side effects in the application or outside world. The most common pure functions people have encountered are mathematical functions.</p>\n</blockquote>\n<p>즉 우리가 수학에서 말하는 함수가 순수 함수라 보면 된다. </p>\n<p>여기서 강사는 순수하지 않은 함수 (Impure function)들에 대한 예시를 제공한다. </p>\n<ol>\n<li><strong>함수가 연산을 수행할 때 받은 인자(input) 이외의 것에 영향을 받는 경우</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token comment\">// Ex 1 - Global State </span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">COST_OF_ITEM</span> <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cartTotal</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">quantity</span> <span class=\"token operator\">=></span>\n      <span class=\"token constant\">COST_OF_ITEM</span> <span class=\"token operator\">*</span> quantity \n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">cartTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//38</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">cartTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//38</span></code></pre></div>\n<p>위 코드에서 함수 f는 순수 함수이다. </p>\n<p>함수 cartTotal 또한 순수 함수라 오해하기 쉽고, 나는 다음과 같은 이유로 오해를 하였다. </p>\n<ul>\n<li>함수 cartTotal 는 연산을 수행하기 전후로 외부에 side effect를 만들지 않는다.</li>\n<li>외부 인자가 있긴 하지만 const로 불변한 데이터이기 때문에 순수함수의 정의에서 벗어나지 않을것이다.</li>\n</ul>\n<p>그러나 함수 cartTotal는 순수하지 않은 함수이다. 그 이유는 input이외의 다른 외부 요인으로 부터 연산의 결과가 영향을 받기 때문이다. </p>\n<p>만약 위 코드에서 외부 변수 COST<em>OF</em>ITEM의 값을 다음과 같이 바꿨다고 가정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token constant\">COST_OF_ITEM</span> <span class=\"token operator\">=</span> <span class=\"token number\">17</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cartTotal</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">quantity</span> <span class=\"token operator\">=></span>\n      <span class=\"token constant\">COST_OF_ITEM</span> <span class=\"token operator\">*</span> quantity \n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">cartTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//34</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">cartTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//34</span></code></pre></div>\n<p>함수의 인자와 함수 자체에 변화는 없었지만, 결과적으로 연산의 결과가 달라졌다. </p>\n<p>그러므로 impure function이다. </p>\n<p><strong>2. 같은 input을 받았음에도 서로 다른 output을 return하는 함수 또한 순수하지 않은 함수이다.</strong> </p>\n<p>이 예는 명료하다. 매 순간 랜덤한 값을 반환 하였으므로 impure하다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Ex 2 - Same input, different output </span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateID</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 예를 조금 더 발전 시켜 햇갈리게 만들면 다음과 같다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Ex 2 - Same input, different output </span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateID</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token function\">generateID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">,</span>\n      age\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Kyle'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Kyle'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Kyle'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>첫번째 예시와 흡사 하지만, 위 예는 다른 상황을 가정한 것이다. </p>\n<p>조금 더 현실적이고 실무에서 접할 법한 예시이다. </p>\n<p>random은 무시하고, rest api에 이름 kyle, 나이 33의 유저를 가져오는 요청을 보냈다고 하자. </p>\n<p>id는 unique할 수 있지만, 이름과 나이는 중복될 수 있다. 그러므로 위 요청은 매 요청마다 서로 다른 반환값을 제공 할 것이므로 impure하다. </p>\n<p>이 예시를 통해 우리는 async한 요청을 하는 함수는 대부분 impure 하다는 것을 느낄 수 있다. </p>\n<p><strong>3. 함수가 함수 밖의 애플리케이션에 side effect를 일으켜도 순수하지 않는 함수가 된다.</strong> </p>\n<p>이 예는 함수 외부의 변수에 접근하여 해당 변수에 변화를 일으키는 예시를 생각 해 볼 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// Ex. 3 - Side Effects #1 </span>\n    <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createFoodItem</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token operator\">++</span>id<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 여기서 발생!</span>\n      name\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">createFoodItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cheeseburgers'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">createFoodItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fries'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">createFoodItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Milkshakes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 예시를 더 생각 해 보면 매우 중요한 결론에 도달한다. </p>\n<p>결국, 함수를 compose하지 않고 상속을 한다던지 </p>\n<p>혹은 nested(중첩된) 함수를 사용하며 local valiable를 둔다던지(이 변수가 mutable/immutable인지는 중요치 않다. 존재하여 사용 되었다면 이미 impure가 되버린다.)</p>\n<p>등의 경우를 지양해야 한다. </p>\n<p><strong>4. 마지막으로 외부에 side effect를 이르키는 것 또한 impure한 function이다</strong></p>\n<p>위에서 외부의 변수를 건들이거나 사용하는 것을 뜻 하는게 아니다. </p>\n<p>우리가 흔히 사용하는 <code class=\"language-text\">console.log</code> 또한 외부에 side effect를 이르키는 함수 이다.</p>\n<p>매 순간 <code class=\"language-text\">console.log</code> 를 사용 함으로써 우리는 treminal에 영향을 준다. 비슷한 예시로 logger같은 것들이 있다. </p>\n<h2>한줄 정리 :</h2>\n<p>소프트웨어를 작성함에 있어 100% FP를 준수하며 작성할 수 없다. (console.log를 사용할 수 없는 상황이 얼마나 개발의 효율을 떨어트릴 수 있을지는 상상에 맡긴다…ㅋ)</p>\n<p>결국 FP의 방법을 왜 사용하는지를 잘 생각하며 FP와 impure function을 잘 분리하여 프로그래밍 해야 한다. </p>\n<p>(예를 들어 FP와 RP를 합쳐 FRP를 만든다던지…ㅎㅎ)</p>\n<p>절대적인 것은 없다! 모든지 상황에 맞춰 융통성 있게, 재밌게 작성하자!</p>\n<p>내일은 나머지 부분에 대한 정리를 하겠다.</p>","frontmatter":{"title":"Just Enough Functional Programming - 1탄","date":"July 08, 2019"}}},"pageContext":{"slug":"/daily/2019-07-08/","previous":{"fields":{"slug":"/daily/2019-07-07/"},"frontmatter":{"title":"SAGA의 필요성과 특징"}},"next":{"fields":{"slug":"/daily/2019-07-09/"},"frontmatter":{"title":"Just Enough Functional Programming - 2탄"}}}}}