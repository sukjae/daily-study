{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-08-04-1/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"6de1afe5-45b7-5447-a6a2-59f99d8634c8","excerpt":"JS에서  를 사용하면,\n 이하 부분이 하나의 block일거라 가정하고 을 쓰면 항상 이미 정의되어있다는 에러가 나서 왜그런가 찾아보니,\n 이하 부분이 하나의 block 이더라… 그래서, 별로 변수를 지정하여 사용하려면 다음처럼  뒤에 brackets…","html":"<p>JS에서 <code class=\"language-text\">switch-case</code> 를 사용하면,\n<code class=\"language-text\">case:</code> 이하 부분이 하나의 block일거라 가정하고 <code class=\"language-text\">let</code>을 쓰면 항상 이미 정의되어있다는 에러가 나서 왜그런가 찾아보니,\n<code class=\"language-text\">switch</code> 이하 부분이 하나의 block 이더라…</p>\n<p>그래서, <code class=\"language-text\">case</code>별로 변수를 지정하여 사용하려면 다음처럼 <code class=\"language-text\">case</code> 뒤에 brackets을 추가해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//say_hello의 message와 say_hi의 message는 같은 scope!</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"say_hello\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"say_hi\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 이렇게 case 뒤에 블록처리하면, (case: {}) 각각의 scope!</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"say_hello\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// added brackets</span>\n    <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">// added brackets</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"say_hi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// added brackets</span>\n    <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참고링크: <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/switch#Block-scope_variables_within_switch_statements\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/switch#Block-scope<em>variables</em>within<em>switch</em>statements</a></p>","frontmatter":{"title":"JS의 switch-case에서 block단위 처리 방법","date":"August 04, 2019"}}},"pageContext":{"slug":"/daily/2019-08-04-1/","previous":{"fields":{"slug":"/daily/2019-08-04-2/"},"frontmatter":{"title":"Conditional rendering 에서 empty component는 어떻게 처리할까?"}},"next":{"fields":{"slug":"/boost-camp-challenge/day-16/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 16일차"}}}}}