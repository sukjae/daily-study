{"componentChunkName":"component---src-templates-blog-post-js","path":"/boost-camp-challenge/day-2/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"e7e0cfc0-f527-5678-8250-14aceb5d7188","excerpt":"피어 세션 후기 오늘 처음 피어 세션을 통해 코드리뷰를 했다. 모두 높은 수준의 지식과 긱함을 같고 있어 굉장이 놀라운 경험이엿다. 조원 중 한명은 타입과 디자인에 대해 광적으로(좋은 의미)로 집착을 하였고 또 다른 한명은 기본적인 js…","html":"<h2>피어 세션 후기</h2>\n<p>오늘 처음 피어 세션을 통해 코드리뷰를 했다.</p>\n<p>모두 높은 수준의 지식과 긱함을 같고 있어 굉장이 놀라운 경험이엿다.</p>\n<p>조원 중 한명은 타입과 디자인에 대해 광적으로(좋은 의미)로 집착을 하였고</p>\n<p>또 다른 한명은 기본적인 js에 대한 지식이 탄탄함을 느낄 수 잇었다</p>\n<p>마지막 한명은 js에 대해 아직은 많이 모르는 듯 하지만 끊임없이 배울려 노력한다</p>\n<p>조원 세명 모두에게 많은걸 배우고 느낄 수 잇던 경험이였다</p>\n<p>이번에 나는 while loop안에 변화되는 const 상수를 넣는 실수를 범햇는데, 팀원 분들이 딱 지적 해 주어서 발전된 코드를 내놓을 수 있었다.</p>\n<p>피어 세션 동안 다른분의 코드를 살펴보며 예외 처리에 대한 아이디어나 다양한 js 이론 등에 대해 토론해 보는 좋은 경험이였다</p>\n<h2>과제 후기</h2>\n<p>오늘 주어진 과제로도 많은것을 배울 수 잇었다.</p>\n<p>새로운것을 찾아본 것은 아니지만, 여러가지 구현 방법 중 선택을 위해 다양한 고민을 해볼 수 있었다.</p>\n<p>특히, 함수의 호출시마다 logging을 쌓아놓고,</p>\n<p>난중에 logging함수 호출 시 쌓인 스텍을 반환하는 작업이 잇었는데</p>\n<p>이 부분에 많은 고민을 하였다.</p>\n<p>나의 주 관심사는 어떻게 하면 메인 함수와 logging 함수를 최대한 decoupling할 수 잇을지에 대한 고민 이엿다.</p>\n<h3>내가 설정한 요구 사항</h3>\n<ul>\n<li>\n<p>로깅을 위한 객체는 필요시마다 재 생성할 수 잇다</p>\n<ul>\n<li>재 생성된 객체는 각각의 로그 인벤토리(스택)을 갖고 있다</li>\n</ul>\n</li>\n<li>독립된 기능을 제공하는 함수들이 존재한다</li>\n<li>\n<p>기능 함수와 로깅을 위한 객체는 서로 최대한 독립적으로 decouple되야 한다</p>\n<ul>\n<li>배스트는 하나의 연결고리를 가지고, 서로에 대한 함수 호출 없이 알아서 작동하는 방식이다</li>\n</ul>\n</li>\n</ul>\n<h3>내가 고민 했던 방법은 다음과 같다</h3>\n<ul>\n<li>\n<p>가장 기본적인 방법으로(안좋은) 그냥 메인에서 로깅 함수를 호출한다</p>\n<ul>\n<li>두 함수가 항상 같은 컨텍스트에 존재해야 한다</li>\n</ul>\n</li>\n<li>\n<p>또 다른 기본적인 방법(안좋은) 전역변수로 로그 스택을 쌓는다</p>\n<ul>\n<li>당연히, 가장 쉽지만 가장 안좋은 방법이다. 전역은 건드리면 안된다</li>\n</ul>\n</li>\n<li>\n<p>Event emmiter등의 방법으로 메인→logging 방향으로 신호를 보낸다.</p>\n<ul>\n<li>이 경우 일방적인 데이터의 흐름 이므로 메인 함수에서 로깅 함수의 호출 방법에 대한 고민을 하지 않아도 된다</li>\n<li>또한 내가 알기론 보통의 웹페이에서 중앙에 로그를 관리하기 위한 방법으로 스이기도 한다</li>\n</ul>\n</li>\n<li>\n<p>.json, .txt등 db의 역할이 되는 외부 저장소를 생각 해 보았다.</p>\n<ul>\n<li>로그가 발생할 때 마다 파일을 작성하여 저장해 두는 방식이다</li>\n<li>하지만 굳이 필요 없는 접근법인듯 하여 제외했다</li>\n</ul>\n</li>\n<li>\n<p>Bind하여 this로 접근한다</p>\n<ul>\n<li>이게 내가 한 방법이다. 콜백 함수와 객체를 전달하여 두개를 binding하였다</li>\n<li>this를 통해 해당 메소드를 접근하고, 해당 메소드가 존재하는지 여부를 체크하였다</li>\n</ul>\n</li>\n<li>\n<p>클로저를 사용하여 각 함수마다 레퍼 컨테스트를 적용한다</p>\n<ul>\n<li>위의 this를 사용하는것 보다 훨씬 깔끔한듯 하다.</li>\n<li>이 글을 작성하며 복기를 하다가 생각난 방법이다.</li>\n<li>This를 사용할 필요 없이 전달받은 함수 혹은 객체에 해당 메소드가 있는지 활용하면 된다</li>\n<li>물론 바인딩도 불필요 하다</li>\n</ul>\n</li>\n</ul>\n<p>그러나 아직까지도 깔끔한 방법을 생각해내지 못했다.</p>\n<p>내일 다른이들이 구현한 방법을 살펴보고 더 나은 방법을 연구해 보도록 하겠다.</p>\n<h2>회고</h2>\n<p>오늘은 외부에 잠시 나갔다 올 일이 있어서 많은 시간 공부에 할애하지 못했다.</p>\n<p>새로운 것을 적용하거나 공부하진 못했지만, 내가 갖고 있는 지식을 돌이켜 보고 깊이 생각할 수 있는 시간 이였다.</p>","frontmatter":{"title":"부스트캠프 2019 챌린지 2일차","date":"July 16, 2019"}}},"pageContext":{"slug":"/boost-camp-challenge/day-2/","previous":{"fields":{"slug":"/boost-camp-challenge/day-0/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 나의 다짐"}},"next":{"fields":{"slug":"/boost-camp-challenge/day-3/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 3일차"}}}}}