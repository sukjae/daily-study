{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-08-01/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"c55572a5-cefa-5473-aa9b-4e4f98a6abbe","excerpt":"프로젝트 고민 과정 오늘의 챌린지 미션을 끝낸 후,  를 더 활용 해 보고 싶었고, 조금 더 실제 개발에서 사용할만할 스킬들을 경험해보고 싶었다.  그래서  와  그리고  으로 무언가 만들어 보기로 결정하였다.  무엇을 만들어볼까 고민하다 지난번에 AWS…","html":"<h2>프로젝트 고민 과정</h2>\n<p>오늘의 챌린지 미션을 끝낸 후, <code class=\"language-text\">canvas</code> 를 더 활용 해 보고 싶었고, 조금 더 실제 개발에서 사용할만할 스킬들을 경험해보고 싶었다. </p>\n<p>그래서 <code class=\"language-text\">ReactJS</code> 와 <code class=\"language-text\">Canvas</code> 그리고 <code class=\"language-text\">websocket</code> 으로 무언가 만들어 보기로 결정하였다. </p>\n<p>무엇을 만들어볼까 고민하다 지난번에 AWS 오프라인 모임에서 다른 분이 위와 비슷한 스택으로 그림판 같은 기능을 구현하셨던 적이 있어서 그 것을 떠올리며 프로젝트를 생각해 보았다. </p>\n<h3>1. [<code class=\"language-text\">React</code> 에 <code class=\"language-text\">canvas</code> 띄우기]</h3>\n<p>개인적으로 React나 node package를 벗어나 다른 기술을 잘 사용해 본적이 없었기에, HTML에서 제공되는 canvas를 React에서 어떻게 활용될지 감이 잘 안왔다. </p>\n<p>그래서 다양한 블로그 글을 읽어보며, 어떻게 HTML DOM element를 리액트에서 접근할지 찾아 보았다. </p>\n<p>내가 잘 떠올리지 못했던 이유는, React는 자체적으로 Virtual DOM을 생성해서 view를 만드는데, 이 Virtual DOM과 실제 HTML DOM이 무언가 차이가 있지 않을까? 차이가 있다면 HTML을 보통의 Vanila JS가 파싱해오듯이 할 수 없는게 아닐까?</p>\n<p>결로은, 그냥 된다. 그냥 리액트로 DOM element를 <a href=\"%5Bhttps://ko.reactjs.org/docs/refs-and-the-dom.html%5D(https://ko.reactjs.org/docs/refs-and-the-dom.html)\">Ref 통하여 접근</a>하면 된다.</p>\n<p>튜토리얼에서 맨날 가능하면 쓰지 말라해서 나는 절대 쓸일이 없을거라 생각했지만, HTML과 DOM이 제공하는 API를 사용하기 위해서는 써야 한다. </p>\n<p>그리고 나는 위의 독스를 따르지 않고 <code class=\"language-text\">useRef</code> hooks를 사용하여 구현하였다. </p>\n<p>다음과 같이 선택하면 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>canvas\n          ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>canvas<span class=\"token punctuation\">}</span>\n          width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">800</span><span class=\"token punctuation\">}</span>\n          height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">800</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 <code class=\"language-text\">useRef</code> 를 통해 선택한 dom element는 다양한 메소드와 프로퍼티를 끌고 온다. </p>\n<p>이를 다음과 같이 접근을하여 사용하는게 기본적인 사용법이다.</p>\n<p>위의 독스처럼 <code class=\"language-text\">ref</code> 를 사용하면 그냥 접근할 수 있지만, <code class=\"language-text\">useRef</code> 사용시엔 <code class=\"language-text\">current</code> 를 활용해야 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>ctx<span class=\"token punctuation\">,</span> setCts<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// @ts-ignore</span>\n      <span class=\"token function\">setCts</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. [ <code class=\"language-text\">React</code> state를 사용하여  <code class=\"language-text\">canvas</code> 위에 점으로 그림그리기]</h3>\n<blockquote>\n<p>결국 React state도 그냥 값에 불가하다는 것을 꼭 기억하자. 그럼 세상 쉬워진다.</p>\n</blockquote>\n<p>위에 작성한 코드에서 고민을 좀 해보자. </p>\n<p>캔버스 점을 찍을 수 있지만, 어떻게 점 <code class=\"language-text\">들</code> 을 찍을 수 있을까? 그것도 동적으로. </p>\n<p>느낌을 왔지만, 확실치 않아서 이런저런 시행착오 끝에 답을 찾았다. </p>\n<p>내가 처음 가정한것은 다음과 같앗다. </p>\n<ul>\n<li>사용자의 마우스의 위치를 알 수 있는 방법이 Web API에서 제공될것이다.</li>\n<li>무언가 이벤트처럼 위의 위치를 js로, 나아가 react로 넘겨받을 방법이 있을것이다.</li>\n<li>\n<p>React에서는 항상 그러하듯, state로 해당 좌표를 받아야 겠다.</p>\n<ul>\n<li>근데, 이 값들을 계속 저장해놔야 그려질까?</li>\n<li>아니면 그냥 값만 주어도 그려질까</li>\n<li>아니면 그냥 값도 저장할 필요가 없을까?</li>\n</ul>\n</li>\n</ul>\n<p>첫번째, 두번째는 <code class=\"language-text\">useRef</code> 를 통해 접근한 element에 <code class=\"language-text\">onMouseMove</code> 와 같은 이벤트를 받으면 쉽게 해결이 되었다. </p>\n<p>이 이벤트를 <code class=\"language-text\">onClick</code> 이벤트 받듯이 넘기면 사용가능하다. </p>\n<p>3번째에서 나는 고민이 시작되었다. </p>\n<p>처음에는 <code class=\"language-text\">cursor</code> 의 현재 점을 기록하는 state를 생성하여 기록하였다.</p>\n<p>그러나, 이게 불필요 하다는 것을 알게 되었고, 나중에는 그냥 event에서 해당 포인트의 점을 찍게 되었다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMouseMove</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> rect <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>clientY <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n<span class=\"token operator\">&lt;</span>canvas\n  ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>canvas<span class=\"token punctuation\">}</span>\n  width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">800</span><span class=\"token punctuation\">}</span>\n  height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">800</span><span class=\"token punctuation\">}</span>\n  onMouseMove<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleMouseMove<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>위의 코드에서 보이다 싶이 다음과 같이 계속 점을 찍어가면, canvas가 존재하는 이상 계속해서 점이 찍힌다. </p>\n<p>그런데 점을 찍는 좌표의 내용이 복잡한 이유는, 현재 나의 스타일에 따라서, 또 canvas의 위치에 따라서 커서의 절대 값이 달라지기 때문이다. </p>\n<p>우리는 항상 좌 상단을 0,0 기준점으로 잡고 생각해야 편하고, 위와 같이 하면 어느정도 커서와 점의 위치를 맞출 수 있다. (더 좋은 방법을 찾아보겠다.)</p>\n<h3>3. [ 초기화 기능 추가하기]</h3>\n<p>다음과 같이 간단하게 구현되었다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">clrearRect</span><span class=\"token template-punctuation string\">`</span></span> 를 통하여 현재 캔버스가 덮어씌어 진다<span class=\"token punctuation\">.</span> \n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleReset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">&amp;&amp;</span> isStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>4. [ <code class=\"language-text\">React</code> state를 사용하여  <code class=\"language-text\">canvas</code> 위에 점으로 그림그리며 <code class=\"language-text\">undo</code> 기능 추가하기]</h3>\n<p>이 내용을 다른 부캠원분꼐 보여드리니, undo기능을 구현해보라는 조언을 얻었다. </p>\n<p>구현을 하기 위해선 현재 배열 정보와, 저장된 배열 정보가 필요했고, 나는 둘 모두 state로 관리하였다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tracking<span class=\"token punctuation\">,</span> setTracking<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>history<span class=\"token punctuation\">,</span> setHistory<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">tracking</code> 은 현재 게임에서 커서의 위치의 모음이다. 초기화 될때 제거된다.</p>\n<p><code class=\"language-text\">history</code> 는 이전 게임에서 커서의 위치의 모음이다. 이 값은 게임이 시작되거나 초기화 될때 제거된다.</p>\n<h3>5. [ 마우스가 눌렸을 때만 커서의 움직임 그리기]</h3>\n<p>커서가 캔버스에 들어가기만 하면 계속해서 그림이 그려졌다. </p>\n<p>이 부분이 뭔가 직관적이지 않아서 클릭하였을때 커서를 움직이면 그림이 그려지도록 하였다. </p>\n<p>위에서 얻은 지식으로 이번에도 event를 사용하여 구현하였다. </p>\n<p>현재 마우스가 클릭되었는지 안되었는지 확인하기 위해 state를 통해 boolean값을 저장하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isMouseDown<span class=\"token punctuation\">,</span> setIstMouseDown<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n<span class=\"token operator\">&lt;</span>canvas\n    ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>canvas<span class=\"token punctuation\">}</span>\n    width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">800</span><span class=\"token punctuation\">}</span>\n    height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">800</span><span class=\"token punctuation\">}</span>\n    onMouseMove<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleMouseMove<span class=\"token punctuation\">}</span>\n    onMouseDown<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIstMouseDown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    onMouseUp<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIstMouseDown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>이는 다시 <code class=\"language-text\">handleMouseMove</code> 에서 그림을 그려주기 전에 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMouseMove</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">&amp;&amp;</span> isMouseDown <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>6. [ <code class=\"language-text\">canvas</code> 에 이미지 올리기 ]</h3>\n<p>js를 사용하여 web api에 접근할때, <code class=\"language-text\">Image</code> api를 통하여 인스턴스를 생성하고, 여기에 <code class=\"language-text\">onload</code> 에 함수를 이어 붙여 <code class=\"language-text\">canvas</code> 에 그림을 그린다. </p>\n<p>신기하게도, React에서 바로<code class=\"language-text\">Image</code> 를 사용하여도 web api와 동일하게 사용이 가능했다. (같은 web api인지 모방하는지 모르겟다.)</p>\n<p>이 사진을 넣는 작업은 게임 시작에 넣었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startGame</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://loremflickr.com/500/500/cat'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>7. [기타]</h3>\n<ul>\n<li><code class=\"language-text\">material-ui</code>를 추가하여 손쉽게 UI를 꾸밈</li>\n<li>loading 을 보여주기 위해 <code class=\"language-text\">LinearProgress</code> 컴포넌트 사용</li>\n<li>게임 종료 아직 구현 안함</li>\n<li>웹소켓 아직 적용 안함</li>\n<li><a href=\"http://pic-drawing.s3-website.ap-northeast-2.amazonaws.com/\">작동하는 라이브 링크</a></li>\n</ul>\n<h2>회고</h2>\n<p>생각보다 짧은 시간안에 많은 것을 배웠다. </p>\n<p>역시 제일 좋은 학습 방법은 프로젝트 인가 보다. </p>\n<p>과거처럼 만들기만 하고 끝냈다면, 머릿속에 아무것도 없었겠지만, 이제는 정리를 하면서 한번 더 배우는것 같다. (강제 리펙토링)</p>\n<p>계속해서 발전하자.</p>","frontmatter":{"title":"ReactJS 와 HTML canvas 사용하여 사진 위에 그림 그리기","date":"August 01, 2019"}}},"pageContext":{"slug":"/daily/2019-08-01/","previous":{"fields":{"slug":"/boost-camp-challenge/day-13/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 13일차"}},"next":{"fields":{"slug":"/boost-camp-challenge/day-14/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 14일차"}}}}}