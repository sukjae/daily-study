{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-08-10/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"af27bcf7-1ea9-5aee-b53a-a3c48b8d252a","excerpt":"오늘의 trial & error 오늘 이 부분에 안되서 한참을 고민을 하였다. 물론, 빠르게 구현하려고 docs를 제대로 안 본 나의 쟐못도 있지만, 이 문제를 해결하는데 힘들었다. Lambda…","html":"<h2>오늘의 trial &#x26; error</h2>\n<p>오늘 이 부분에 안되서 한참을 고민을 하였다.</p>\n<p>물론, 빠르게 구현하려고 docs를 제대로 안 본 나의 쟐못도 있지만, 이 문제를 해결하는데 힘들었다.</p>\n<p>Lambda를 사용할때, 다음 코드에서 이상한 점을 느낄 수 있을까??</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">,</span> style <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>body\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>뭐.. 지극히 그럴싸하고, 딱히 문제가 될게 없어 보이는 코드이다.</p>\n<p>event안에 body라는 프로퍼티가 있는게 확실하고,</p>\n<p>그 안에 우리가 원하는 정보가 있다는것이 확실한데,</p>\n<blockquote>\n<p>위 코드에 문제가 있을것이라 생각하지 힘들다.</p>\n</blockquote>\n<h2><strong>하지만, 위 코드는 정상적으로 작동하지 않는다.</strong></h2>\n<p>그 이유는, 우리가 편의상 사용하는 lambda-proxy때문이다.</p>\n<p>이미 잘 알려진 문제이고, 특성을 이해하면 납득이 가지만,</p>\n<p>문제는 저 위의 구문이 상식선에서는 뭐가 잘못됬는지 모른다는 것이다.</p>\n<p>이 부분을 이해하기 위해서는 Lambda와 Api-gateway의 관계를 이해 해야 한다.</p>\n<p>이 둘은 서로 조화롭게 사용되지만, 엄연히 서로 다른 제품이다.</p>\n<p>둘간의 통합이 너무 잘 이루어져 있기 때문에, 그냥 api-gateway를 병목처럼 통로 중간에 서있는 놈으로 바라볼 수 있지만,</p>\n<p>이 API-Gateway에서 처리할 수 있는것은 너무나도 많다. (Auth관련, 등등)</p>\n<p>http 요청을 보낼 때 따지고 보면, 우리는 Lambda를 향하지만, 사실상 api gateway의 url로 보내게 된다.</p>\n<p>그리고, api-gateway는 그 요청을 해석하여 경우에 따라 lambda로 전달하는데,</p>\n<p>여기서 우리는 두가지 방식으로 api-gateway가 전달받은 정보를 lambda에서도 참조할 수 있다.</p>\n<ol>\n<li>lambda proxy</li>\n<li>lambda integration</li>\n</ol>\n<p>이 둘간의 비교는 다음 글에서 너무나도 잘 정리 되어 있기 때문에 생략한다.</p>\n<p><a href=\"https://medium.com/@lakshmanLD/lambda-proxy-vs-lambda-integration-in-aws-api-gateway-3a9397af0e6d\">[Lambda-Proxy vs Lambda Integration in AWS API Gateway, Lakshman Diwaakar]</a></p>\n<p>결론을 말하자면, api gateway가 전달 받은 정보를 커스텀하게 받으려면 lambda integration을 사용하면 되고,</p>\n<p>말그대로 proxy처럼 api gateway를 그냥 중간 다리 정도로 사용하려면 lambda proxy를 사용하면 된다.</p>\n<p>대부분의 경우에는 lambda proxy만으로도 충분하고, 이를 사용시에는 api gateway가 요청 받은 대부분의 정보를 그대로 Lambda로 넘긴다.</p>\n<p>문제는, 여기서 api gateway는 lambda로 받은 정보를 보내는건 맞지만,</p>\n<p>형식을 그대로 (혹은 사용하기 편하게) 보내는것은 아니다. (어쩌면 이게 진짜 ‘그대로’ 일수도… 좀더 공부해 보겠다.)</p>\n<p>api gateway는 사용자에게 받은 post의 body부분을 escaped string으로 보낸다.</p>\n<p>위의 구문이 작동하지 않았던 이유는, <code class=\"language-text\">event.data</code> 가 다음과 같이 그냥 쌩 문자열이기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"{\\\"foo\\\":\\\"bar\\\"}\"</span></code></pre></div>\n<p>이를 우리는 JSON으로 바꿔줘야 JS에서 내부적으로 객체로서 활용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre></div>\n<p>사실, 이 부분은 <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html\">AWS 공식 문서</a>에도 포함되어 있는 내용이다..ㅎㅎ</p>\n<p>위의 사용법이 더 혼란이 온 이유에는 get 에서 query parameter를 읽어들이는 부분은 다음처럼 위의 사용방법과 유사한것도 한몫 했다.</p>\n<p>다음 코드는 정상적으로 작동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>queryStringParameters<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>언제나 그렇지만 …</p>\n<blockquote>\n<p>시간이 허락한다면 꼭 공식 문서를 읽쟈</p>\n</blockquote>","frontmatter":{"title":"Lambda에서 API-Gateway로 넘겨받은 post의 body읽기","date":"August 10, 2019"}}},"pageContext":{"slug":"/daily/2019-08-10/","previous":{"fields":{"slug":"/boost-camp-challenge/day-20/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 20일차"}},"next":{"fields":{"slug":"/daily/2019-08-11/"},"frontmatter":{"title":"Normalizr, 객체(JSON) 분해하기"}}}}}