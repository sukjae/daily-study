{"componentChunkName":"component---src-templates-blog-post-js","path":"/boost-camp-challenge/day-4/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"252c5a43-f4c7-54e7-99b9-ebd7b65fd611","excerpt":"챌린지 중 느낀것 주어진 기능을 완성 한 뒤 시간이 많이 남아 재밌는 도전을 해봤다.   단, 코드의 가독성을 일부러 떨어트리는,  예를 들어 그 스스로 적당한 이름이 있을 수 있는 count 변수를 임의의 한글자 x…","html":"<h2>챌린지 중 느낀것</h2>\n<p>주어진 기능을 완성 한 뒤 시간이 많이 남아 재밌는 도전을 해봤다. </p>\n<p><code class=\"language-text\">극단적 코드 줄이기</code></p>\n<p>단, 코드의 가독성을 일부러 떨어트리는, </p>\n<p>예를 들어 그 스스로 적당한 이름이 있을 수 있는 count 변수를 임의의 한글자 x로 바꾸는 등의 편법은 안된다</p>\n<p>순수히 한가지 목적을 위하여 두가지 수단만을 사용한다. </p>\n<ol>\n<li>\n<p>불필요한 변수 제거하기</p>\n<ul>\n<li>변수명을 극단적으로 줄이는 것은 안되지만, 변수를 제거하는것은 좋은 행동인듯 하다.</li>\n</ul>\n</li>\n<li>\n<p>불필요한 로직 제거하기</p>\n<ul>\n<li>변수를 줄이다보면 클로저등이 필요없어 하나의 함수로 가능 해지기도 한다.</li>\n<li>또한, 로직을 줄여 한가지 함수로 두, 세가지 함수가 하는 일을 할 수 있다면 더욱 좋은 코드가 될것 이다.</li>\n</ul>\n</li>\n</ol>\n<p>위 두가지 수단을 염두에 두고 코드 줄이기를 하였다. </p>\n<p>결과는 만족할만한 결과가 나왔다. </p>\n<h3>변수 줄이기</h3>\n<p>특히, 클로저에 편의를 위해 저장했던 공통 변수들을 하나씩 제거하니 외부 함수가 전혀 필요 없어졌다. </p>\n<p>이로 인해 두개의 함수로 작성 되었던 코드를, 하나의 함수로도 동일한 기능을 제공할 수 있었다. </p>\n<h3>로직 변화주기</h3>\n<p>루프를 돌리던것, 재귀를 돌리던것, reduce를 돌리던것 등 다양한 방법으로 같은 목적을 달성하는 고민을 하였다. </p>\n<p>그 중 가장 간단해지는 로직을 선택하여 구현하니 코드가 깔끔해 졌다.</p>\n<h3>재귀함수 클로져 날리기</h3>\n<blockquote>\n<p>어디서 찾아본게 아니라, 제 머릿속에서 하나씩 연구하며 내놓은 결과이다. </p>\n</blockquote>\n<p>어제까지 재귀함수를 사용할때, 외부 함수에 공통 변수를 둔 뒤, </p>\n<p>새로운 내부 함수를 만들고 return으로 재귀함수를 호출하는 식으로 작성 하였다 .</p>\n<p>그러한 이유는 외부하수로 return을 하여 재귀를 호출할 방법이 마땅히 떠오르지 않았다. </p>\n<p>아래 코드로 생각해 보자 .</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">const</span> someVar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token comment\">// ... some logic</span>\n    \t\t<span class=\"token comment\">// .. some recursion logic</span>\n    \t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span>someInitialVal<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>어제까지는 위 코드와 같이 작성 하였는데, 크게 두가지 이유로 그리하였다.</p>\n<ol>\n<li>재귀가 도는 동안 공통의 참조가 될 대상인 <code class=\"language-text\">someVar</code> 가 필요하였다. </li>\n<li>내부의 <code class=\"language-text\">innerFunc</code> 을 익명으로 작성하고 싶었지만, 그 경우 재귀를 돌릴 수 없었다. (호출할 대상이 없으니…)</li>\n</ol>\n<p>그리하여 타협점을 찾아 <code class=\"language-text\">outerFunc</code> 를 호출하면, 자동으로 innerfunc가 실행되어 재귀 로직을 돌리도록 하였다. </p>\n<p>이 코드가 나쁜 코드는 아니지만, 위 기능에서 공통의 참조 대상이 <code class=\"language-text\">someVar</code>  가 굳이 필요 없다면, 재귀를 돌릴 다른 방법이 필요하다. </p>\n<p>그러한 경우에도 <code class=\"language-text\">outerFunc</code> 가 필요할까 라는 고민을 오늘 많이 하였다. 그 결과 나온 나의 결론은 다음과 같다 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dec2bin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span><span class=\"token constant\">B</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">B</span> <span class=\"token operator\">:</span><span class=\"token function\">dec2bin</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>someMutation<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드를 보면 알겠지만, 더이상 <code class=\"language-text\">outerFunc</code> 가 필요하지 않다. </p>\n<p>탈출 조건을 재귀함수 내부 초반에 넣어야 한다는 고정관념에서 벗어나니, </p>\n<p><code class=\"language-text\">return</code> 값에 탈출 조건을 넣는 괴상한 코드를 작성해 볼 수 있었다. </p>\n<p>즉, 위 코드는 재귀의 탈출 조건과 재귀 실행 요건등을 리턴에 모두 압축 시켜놓은 참 신기한 코드가 되었다. </p>\n<h3>리듀서에서 <code class=\"language-text\">accumulator</code>로 복잡하게 값을 전달할 수 있지만,,, 그러지 말아보자.</h3>\n<p>코드 작성 중반에 변수들을 줄이기 위해 다음과 같은 로직을 작성 하였었다. </p>\n<p>일단, 이 코드를 작성하게 된 계기는 다음과 같다. </p>\n<ul>\n<li><code class=\"language-text\">someArrayA</code> 와 <code class=\"language-text\">someArrayB</code> 가 존재한다.</li>\n<li>\n<p><code class=\"language-text\">someFunc</code> 에 <code class=\"language-text\">someArrayA</code> 와 <code class=\"language-text\">someArrayB</code> 를 넣어 어떤 값을 반환 받는데, 이 값은 두가지 정보를 갖고 있다.</p>\n<ul>\n<li><code class=\"language-text\">someFunc</code>의 반환값은 객체 형태로서, {S:1, C:1} 이런식이다.</li>\n</ul>\n</li>\n<li>\n<p>문제는 <code class=\"language-text\">someFunc</code>에 3번째 인자가 존재하는데, 이 인자는 reduce로 순회를 하며 직전에  <code class=\"language-text\">someFunc</code>에서 반환된 객체의 C값이다.</p>\n<ul>\n<li>즉, <code class=\"language-text\">i</code>순서에서  <code class=\"language-text\">someFunc</code> 연산의 결과로 <code class=\"language-text\">{S:1, C:1}</code>  객체가 나오는데, <code class=\"language-text\">i+1</code> 순서에서 <code class=\"language-text\">i</code> 때 연산된 C값을 3번째 인자로 넣는다.</li>\n</ul>\n</li>\n<li>\n<p>정리하면,</p>\n<ul>\n<li>결과적으로 내가 연산의 끝에 필요한 것은 배열 한개 이다.</li>\n<li>하지만, <code class=\"language-text\">reduce</code>등으로 순회를 하며 팔로우(keep track)  해야하는 값은 두가지 이다 (현재까지의 배열(정답) &#x26;&#x26; 직전 단계의 연산 결과(C))</li>\n</ul>\n</li>\n</ul>\n<p>위 가정을 해결하기 위해 초반에는 클로저를 통해 외부와 내부 함수 사이 공용변수를 두었다. </p>\n<p>이 변수의 값을 계속 접근하여 flag를 뒤집듯이 연산을 이어 나갔다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// 초반 코드</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function\">outerFunc</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token comment\">// ... some logic</span>\n    \t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 외부의 어떤 값</span>\n    \t\t<span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// reduce가 순회하며 초기화 되지 않을 저장소</span>\n    \t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> someArrayA<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    \t\t  <span class=\"token keyword\">const</span> tmpResult <span class=\"token operator\">=</span> <span class=\"token function\">someFunc</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> someArrayB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t\tflag <span class=\"token operator\">=</span> tmpResult<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span>\n    \t\t  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>acc<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> tmpResult<span class=\"token punctuation\">.</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    \t\t    <span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> someVal<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러나, <code class=\"language-text\">outerFunc</code> 와 내부 저장 변수를 모두 제거하고 싶은 마음에 <code class=\"language-text\">flag</code> 를 일단 없애고 보니 아래 코드와 같은 모습이 나와버렸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// 중반 코드</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function\">outerFunc</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token comment\">// ... some logic</span>\n    \t\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> someArrayA<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    \t\t  <span class=\"token keyword\">const</span> tmpResult <span class=\"token operator\">=</span> <span class=\"token function\">someFunc</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> someArrayB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    \t\t    <span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span>\n    \t\t    r<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>acc<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> tmpResult<span class=\"token punctuation\">.</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    \t\t    c<span class=\"token operator\">:</span> tmpResult<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span><span class=\"token punctuation\">,</span>\n    \t\t  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> r<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> someVal<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">flag</code> 를 제거하는데에는 성공햇지만, 계속 따라가야할 변수를 잡을 방법을 생각하지 못하여 배보다 배꼽이 더 커진듯하다. </p>\n<p>그러나 아직 <code class=\"language-text\">outerFunc</code> 이 남아있었고, 로직도 너무 더러워서 고민을 많이 하였다. </p>\n<p>그 결과 나온 아이디어가, 다음과 같았다. (최종)</p>\n<ul>\n<li>어차피 flag와 같이 하나의 값만 참조한다면, 이 값을 배열 끝에 이어 붙이는건 어떨까</li>\n<li>예를 들어, (괄호 <code class=\"language-text\">{}</code> 가 제거해야 할 대상)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token boolean\">true</span> <span class=\"token boolean\">false</span>\n    \n    index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token boolean\">true</span> <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> <span class=\"token boolean\">false</span> <span class=\"token boolean\">true</span>\n    <span class=\"token boolean\">true</span> <span class=\"token boolean\">false</span> <span class=\"token boolean\">true</span>\n    \n    index <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token boolean\">true</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token boolean\">false</span> <span class=\"token boolean\">true</span>\n    <span class=\"token boolean\">true</span> <span class=\"token boolean\">false</span> <span class=\"token boolean\">false</span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>즉, 이전 배열의 가장 끝에 존재 하였던 값 (위 코드에서 는 <code class=\"language-text\">tmpResult.C</code> , 즉 이전 <code class=\"language-text\">someFunc</code> 연산의 결과 중 <code class=\"language-text\">C</code> 값.) 을 제거하여 새로운 값을 이어 붙이는 전략이다. </p>\n<p>이 경우, <code class=\"language-text\">accumulator</code> 로 재 생성된 배열이 지속적으로 전달되고, </p>\n<p>우리는 루프마다 <code class=\"language-text\">accumulator</code> 에서 넘겨 받은 배열중에 정확히 어떤 부분에 미래에 참조할 새로운 C값이 있고, 어떤 부분에 과거에 참조한 C값이 있는지 알 수 있다. </p>\n<blockquote>\n<p>결과적으로, 새로 배열을 생성하기 전에 배열의 가장 마지막 엘리먼트가 C값, 즉 제거해야 할 대상이다. </p>\n</blockquote>\n<p><strong>이를 통해 최종적으로 나온 결과물은 이러하다.</strong></p>\n<blockquote>\n<p><code class=\"language-text\">someFunc</code> 을 두개의 함수 <code class=\"language-text\">someFuncA</code> 와 <code class=\"language-text\">someFuncB</code> 로 분리 하였다. </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">innerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>acc<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">someFuncA</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">someFuncB</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">outerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>innerFunc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>결과적으로 상당히 깔끔한 코드가 작성되었다. </p>\n<p>위 코드를 한줄로도 작성할 수 있지만, 가독성을 위해 분리해 두었다. </p>\n<p><code class=\"language-text\">reduce</code> 에 대한 <code class=\"language-text\">return</code> 값만 배열로 하나 존재하는데, 이 안에서 모든 로직이 진행된다. </p>\n<h2>회고</h2>\n<p>어제에 이어 <code class=\"language-text\">reduce</code> 에 대한 새로운 관점을 발견하게 되어 기분이 좋다. </p>\n<p>종종 리팩토링을 하며 코드를 줄이기 위한 고민을 많이 해봐야 겠다.</p>","frontmatter":{"title":"부스트캠프 2019 챌린지 4일차","date":"July 18, 2019"}}},"pageContext":{"slug":"/boost-camp-challenge/day-4/","previous":{"fields":{"slug":"/boost-camp-challenge/day-3/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 3일차"}},"next":{"fields":{"slug":"/boost-camp-challenge/day-5/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 5일차"}}}}}