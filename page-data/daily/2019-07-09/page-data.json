{"componentChunkName":"component---src-templates-blog-post-js","path":"/daily/2019-07-09/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"123b7c51-7d8f-5d73-bbed-12d651792b62","excerpt":"공부 이유 : 요즘 functional programming과 reactive programming을 학습하며 다양한 Intro 강의들을 찾아 학습하고 있다. 그 중에서 오랜만에 깔끔하고 잘 만들어진 강의가 있어 정리해 보았다. [Just Enough Functional…","html":"<h2>공부 이유 :</h2>\n<p>요즘 functional programming과 reactive programming을 학습하며 다양한 Intro 강의들을 찾아 학습하고 있다. 그 중에서 오랜만에 깔끔하고 잘 만들어진 강의가 있어 정리해 보았다. <a href=\"https://egghead.io/courses/just-enough-functional-programming-in-javascript\">[Just Enough Functional Programming in JavaScript]</a></p>\n<h2>공부 내용 :</h2>\n<blockquote>\n<p>이번 정리는 앞선 <a href=\"https://github.com/sukjae/daily-study/blob/master/2019-07-08.md\">Just Enough Functional Programming - 2탄</a>에 이어지는 내용이다. 순서는 상관 없지만 미리 읽어보길 바란다.</p>\n</blockquote>\n<p>강의에서 강사는 말 그대로 Functional Programming을 바로 사용할 수 있을 정도의 적당한 레벨의 지식을 전달한다. 전체적인 느낌을 보기도 좋고, 실무에 부분 부분 적용 해 보기도 좋은 것 같다.</p>\n<h3>CH6. Create Reusable Functions with Partial Application in JavaScript</h3>\n<p>partial application을 이용하여 고정 인자를 갖은 재사용 가능한 함수를 만드는게 이번 챕터의 목적이다. 동일한 함수를 분산된 코드들에서 범용적으로 사용할 수 있는 의미의 재사용 이라기 보다는, 미시적으로 반복되어 사용될 수 있는 함수를 만든다.</p>\n<blockquote>\n<p>This lesson teaches you how arguments passed to a curried function allow us to store data in closure to be reused in our programs and applications.</p>\n</blockquote>\n<blockquote>\n<p><strong>Partial Application:</strong>\nIn computer science, partial application (or partial function application) refers to the process of fixing a number of arguments to a function, producing another function of smaller <strong>arity</strong>.\n즉, 인자중 일부를 고정하여 낮은 항수를 갖는 함수를 생성하는 것 이다.</p>\n</blockquote>\n<p>예시,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Partial Application</span>\n<span class=\"token keyword\">const</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFromAPI</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">baseURL</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">endpoint</span> <span class=\"token operator\">=></span> cb⇒ <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>endpoint<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> getGithub <span class=\"token operator\">=</span> <span class=\"token function\">getFromAPI</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'https://api.github.com'</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> getGithubUsers <span class=\"token operator\">=</span> <span class=\"token function\">getGithub</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> getGithubRepos <span class=\"token operator\">=</span> <span class=\"token function\">getGithub</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/respositories'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 전달된 함수는 동일한 조건으로 여러번 사용될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">getGithubUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">getGithubUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>avatar_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서 또한 눈여겨 볼 점은, 함수의 끝에 행하는 연산을 함수를 정의할 때 제공한게 아니라 함수가 생성된 뒤 제공했다는 점인것 같다.</p>\n<p>즉, 우리는 어떤 특정한 값들의 흐름에 대하여 어떤 행동을 취할 것인지 나중에 고려할 수 있다.</p>\n<h3>CH7. Eliminate Anonymous JavaScript Functions with Pointfree Programming</h3>\n<blockquote>\n<p>This lesson teaches you what pointfree programming is, passing a named function as an argument to avoid writing an anonymous function with interim(임시의) variables instead.</p>\n</blockquote>\n<p>이름을 갖은 함수(named function)을 인자로서 전달 함으로서 익명 함수를 제공함을 피한다. 이러한 방식은 다음과 같은 장점들을 갖고 있다.</p>\n<blockquote>\n<p>Pointfree programming increases code legibility, decreases the surface area for bugs, and makes our code more composable and unit testable.</p>\n</blockquote>\n<p>결국, 다음과 같은 코드를 변화 시키는 것을 뜻 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Pointfree Programming</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// into</span>\n\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Legibility</span></code></pre></div>\n<p>위에 언급 되었듯이, 우리는 로직을 분리 함으로서 가독성에서 이득을 챙길 수 있었다.</p>\n<p>또한, 우리는 unit test를 보다 쉽게, 세부적으로 진행할 수 있게 되었다.</p>\n<p>다만, 내 생각에는 모든 함수를 다음과 같이 분리 할 필요가 있을까 싶다. 이것은 조금 더 고민 해 봐야 겠다.</p>\n<h3>CH8. Build Up Complex Functionality by Composing Simple Functions in JavaScript</h3>\n<p>FP에서 composition(합성)은 매우 중요한 패턴이다. 이러한 합성은 우리가 수학 시간에 배운 합성과 동일하게 적용 된다.</p>\n<blockquote>\n<p>Composition is the act of combining these functions so that the output of one becomes the input of the next one.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Composition</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">g</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그러나, 이렇게 함수를 중첩하여 호출하는 방식은 쉽게 성가시게 된다. 다음 예시를 보자. 우리는 순차적인 작업을 위해서 아래처럼 함수를 중첩하여 호출하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Composition</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">g</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">scream</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">exclaim</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">repeat</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token function\">exclaim</span><span class=\"token punctuation\">(</span><span class=\"token function\">scream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I love egghead\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이를 해결할 방법 중 하나가 HOF이다.</p>\n<blockquote>\n<p>A better way to do this would be to create a higher-order function that can accept any number of functions as arguments, and create a composition out of them.</p>\n</blockquote>\n<p>아래와 같이 함수들을 인자로 넘겨받는 <code class=\"language-text\">compose</code> 함수를 생성 함으로서 위의 기능을 똑같이 재현할 수 있다.</p>\n<p><strong>여기서 또 중요한 부분은, 위의 partial application의 예시와 비슷하게 연산에 사용될 함수를 생성 이후에 전달하는 패턴을 사용 했다는 것이다</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> fns<span class=\"token punctuation\">.</span><span class=\"token function\">reduceRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> withExuberance <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>repeat<span class=\"token punctuation\">,</span> exclaim<span class=\"token punctuation\">,</span> scream<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">withExuberance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I love egghead\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 예시에서 인자로 전달되는 함수는 우측에서 좌측으로 순차적으로 제공된다. 이는 수학에서 합성을 할때 내부→외부로 순차적으로 시행한는것과 동일한 논리이다.</p>\n<p>그러나, Ramda and Lodash/FP 등과 같이 FP 코드를 작성하는데 도움을 주는 라이브러리 들은 좌측→우측으로 시행하기도 하니 주의하자.</p>\n<h2>한줄 정리 :</h2>\n<p>소프트웨어를 작성함에 있어 100% FP를 준수하며 작성할 수 없다. (console.log를 사용할 수 없는 상황이 얼마나 개발의 효율을 떨어트릴 수 있을지는 상상에 맡긴다…ㅋ)</p>\n<p>결국 FP의 방법을 왜 사용하는지를 잘 생각하며 FP와 impure function을 잘 분리하여 프로그래밍 해야 한다.</p>\n<p>(예를 들어 FP와 RP를 합쳐 FRP를 만든다던지…ㅎㅎ)</p>\n<p>절대적인 것은 없다! 모든지 상황에 맞춰 융통성 있게, 재밌게 작성하자!</p>\n<p>내일은 나머지 부분에 대한 정리를 하겠다.</p>","frontmatter":{"title":"Just Enough Functional Programming - 2탄","date":"July 09, 2019"}}},"pageContext":{"slug":"/daily/2019-07-09/","previous":{"fields":{"slug":"/daily/2019-07-08/"},"frontmatter":{"title":"Just Enough Functional Programming - 1탄"}},"next":{"fields":{"slug":"/daily/2019-07-10/"},"frontmatter":{"title":"스크럼과 XP (헨릭 크니버그) 나머지 절반을 읽고..."}}}}}