{"componentChunkName":"component---src-templates-blog-post-js","path":"/boost-camp-challenge/day-1/","result":{"data":{"site":{"siteMetadata":{"title":"Daily Study | Sukjae"}},"markdownRemark":{"id":"f853553e-1086-504b-b0c8-ed1d966d1ea1","excerpt":"주어진 문제를 해결하며 적용한 라이브러리 Jest - testing library JsDoc - markup language used to annotate JavaScript source code files TypeScript - It is a strict syntactical…","html":"<h2>주어진 문제를 해결하며 적용한 라이브러리</h2>\n<ul>\n<li><strong>Jest</strong> - testing library</li>\n<li><strong>JsDoc</strong> - markup language used to annotate JavaScript source code files</li>\n<li><strong>TypeScript</strong> - It is a strict syntactical superset of JavaScript, and adds optional static typing to the language.</li>\n<li><strong>ESLint</strong> - static code analysis tool for identifying problematic patterns found in JavaScript code</li>\n</ul>\n<h2>오늘 시도한 것</h2>\n<ul>\n<li>TDD (잘 안됬음)</li>\n<li>Unit Testing</li>\n<li>Type Checking</li>\n<li>Airbnb linter</li>\n<li>영어로 커밋 메시지 작성해 보기</li>\n<li>Refactoring</li>\n</ul>\n<h2>오늘 배운 것</h2>\n<h3>Jest 넣어보기</h3>\n<ul>\n<li>jest 에서 typecheck는 함수를 인자로 받는다.</li>\n<li>지금은 unit test만 작성 하였지만, 추후에는 다른 테스팅 기법도 시도해 봐야겠다.</li>\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/47397208/error-is-thrown-but-jests-tothrow-does-not-capture-the-error\">Error is thrown but Jest’s <code class=\"language-text\">toThrow()</code> does not capture the error</a></p>\n<h3>type checking 넣어보기 (type script &#x26; jsdoc)</h3>\n<ul>\n<li>runtime에서 type을 체킹하는 것과 코드상에서 체킹하는것을 비교 고민해봐야 할듯 하다.</li>\n<li>런타임에서 타입체킹을 강제하지 않기 때문에 따로 에러 헨들링 해줘야 하는것 같다.</li>\n<li>예시 <code class=\"language-text\">if(typeof varFirst !== &#39;number&#39;){throw new TypeError();}</code></li>\n<li>이렇게 발생한 에러는 Jest에서 다음과 같이 테스트할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong type testing\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// @ts-ignore</span>\n    <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>TypeError<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>여기서 작은 팁은, 위 테스트가 에러를 가정한 테스트 임으로 VSCode에서는 type error로 계속해서 어필한다. 이를 방지하기 위해 <code class=\"language-text\">// @ts-ignore</code> 을 추가한다. (해당 라인의 코드 바로 위에 작성해야함)</li>\n</ul>\n<h3>JSDoc 조금 더 자세히</h3>\n<ul>\n<li>Technically, we are going to <strong>use TypeScript but not for compiling</strong> our code.</li>\n<li>Instead we’ll use it to <strong>check</strong> the types of our JavaScript code <strong>during code time</strong> using JSDocs comments and type inference.</li>\n</ul>\n<p>즉, JSDoc을 사용함에 있어 TS를 활용하지만 컴파일 단계에서 파일을 변환(ts→js) 하는게 아니라 코딩중에 체크하는 방법이 된다.</p>\n<p><strong>타입을 사용하면 다음과 같은 장점을 얻을 수 있다.</strong></p>\n<ol>\n<li>Early detection of type errors</li>\n<li>Better code analysis</li>\n<li>Improved IDE support</li>\n<li>Promotes dependable refactoring</li>\n<li>Improves code readability</li>\n<li>Provides useful IntelliSense while coding</li>\n</ol>\n<p>또한 JSDoc은 일반적인 JS의 주석의 형태를 띈다는 특징을 갖고 있다.</p>\n<p>이 특징은 타입 체크를 위하여 별도의 컴파일이나 변형이 필요치 않다는 것을 의미 한다. 최종 단계에서 minify등을 할시에 자동으로 주석을 날릴 수 있으므로 매력적이다.</p>\n<p>typescript와 활용해서 만들 수 있는 큰 시너지중에 하나는 d.ts와 연동이 가능하다는 것이다.</p>\n<p>별도의 커스텀 타입을 정의한 뒤 본 JS의 extension을 망가트리지 않는 선에서 활용이 가능하다.</p>\n<p>아래 컨텐츠에 자세히 서술되어 있다.</p>\n<p><a href=\"https://medium.com/@trukrs/type-safe-javascript-with-jsdoc-7a2a63209b76\">Type Safe JavaScript with JSDoc - TruckJS - Medium</a></p>\n<h3>linter 넣어보기 (airbnb)</h3>\n<ul>\n<li>여러 Linter중에 가장 유명하고 기본이 되는 airbnb 스타일로 적용을 하였다.</li>\n<li>\n<p>처음에 하나하나 스타일링을 맞추다, 귀찮아서 save시에 autoFix옵션을 설정 하였다 .</p>\n<ul>\n<li>이는 VSCode 의 ESLint 패키지에서 설정 가능하며 아래 내용을 참조하자</li>\n</ul>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint - Visual Studio Marketplace</a></p>\n</li>\n</ul>\n<h3>github 잘못 푸시 했을때</h3>\n<ul>\n<li>git으로 원격 repository로 잘못된 branch로 push를 하는 실수를 했다.</li>\n<li>이로 인해 fork된 나의 repository는 master로 오염되었고, 나에게 할당되어 있던 branch로 이미 작성된 commit message를 옮길 방법이 필요 했다.</li>\n<li>결국에, commit message를 옮길 방법은 찾았지만, 굳이 master로 내 private forked repository에 올라간 commit을 지울 필요는 없었기에 그냥 놔두었다.</li>\n<li>아래 답변을 활용하였다.</li>\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/6465699/git-push-to-wrong-branch\">Git push to wrong branch</a></p>\n<h3></h3>\n<h2>회고</h2>\n<p>비교적 쉬운 난이도의 과제가 주어지니 코드 외적인 것을 고민할 시간이 많았다.</p>\n<p>그로 인해 지금껏 적용해 보지 않았던 것들을 많이 시도해볼 수 있었다.</p>\n<p>오늘 적용한 그대로를 쌓아가며 매일 매일 발전하도록 하자.</p>","frontmatter":{"title":"부스트캠프 2019 챌린지 1일차","date":"July 15, 2019"}}},"pageContext":{"slug":"/boost-camp-challenge/day-1/","previous":{"fields":{"slug":"/daily/2019-07-14/"},"frontmatter":{"title":"JS 이해하기 [JS, nodeJS, V8, Libuv]-1탄"}},"next":{"fields":{"slug":"/boost-camp-challenge/day-0/"},"frontmatter":{"title":"부스트캠프 2019 챌린지 나의 다짐"}}}}}